<!doctype html>
<html lang="en">
<head>

<perl>
    my $ret = '';
    $ret .= processTemplate("headers.tpl");
    $ret .= processTemplate("utils.tpl");
    $ret .= processTemplate("api.tpl");
    return $ret;
</perl>

<script type="text/javascript" src="static/webgl/lib/webgl-utils.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;

    varying vec2 vTextureCoord;

    uniform sampler2D uSampler;

    void main(void) {
        gl_FragColor = texture2D(
            uSampler,
            vec2(vTextureCoord.s, vTextureCoord.t)
        );
    }
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec2 aTextureCoord;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

    varying vec2 vTextureCoord;

    void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(
            aVertexPosition,
            1.0
        );
        vTextureCoord = aTextureCoord;
    }
</script>

<script type="text/javascript">

    var gl;
    var shaderProgram;

    function initGL(canvas){
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e){
        }
        if (!gl){
            pfatal("Could not initialise WebGL, sorry :-(");
        }
    }

    function getShader(gl, id){
        var res;

        var shaderScript = document.getElementById(id);
        if (!shaderScript){
            return null;
        }

        var str = "";
        var k   = shaderScript.firstChild;
        while (k){
            if (k.nodeType == 3){
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment"){
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex"){
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        res = gl.getShaderParameter(
            shader,
            gl.COMPILE_STATUS
        );
        if (!res){
            pfatal(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }

    function initShaders(){
        var res;
        var fragmentShader  = getShader(gl, "shader-fs");
        var vertexShader    = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        res = gl.getProgramParameter(
            shaderProgram,
            gl.LINK_STATUS
        );
        if (!res){
            pfatal("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute
            = gl.getAttribLocation(
                shaderProgram,
                "aVertexPosition"
            );
        gl.enableVertexAttribArray(
            shaderProgram.vertexPositionAttribute
        );

        shaderProgram.textureCoordAttribute
            = gl.getAttribLocation(
                shaderProgram,
                "aTextureCoord"
            );
        gl.enableVertexAttribArray(
            shaderProgram.textureCoordAttribute
        );

        shaderProgram.pMatrixUniform = gl.getUniformLocation(
            shaderProgram,
            "uPMatrix"
        );
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(
            shaderProgram,
            "uMVMatrix"
        );
        shaderProgram.samplerUniform = gl.getUniformLocation(
            shaderProgram,
            "uSampler"
        );
    }

    var mvMatrix        = mat4.create();
    var mvMatrixStack   = [];
    var pMatrix         = mat4.create();

    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }

    function mvPopMatrix() {
        if (mvMatrixStack.length == 0){
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }

    function setMatrixUniforms(){
        gl.uniformMatrix4fv(
            shaderProgram.pMatrixUniform,
            false,
            pMatrix
        );
        gl.uniformMatrix4fv(
            shaderProgram.mvMatrixUniform,
            false,
            mvMatrix
        );
    }

    function degToRad(degrees){
        return degrees * Math.PI / 180;
    }

    var currentlyPressedKeys = {};

    function handleKeyDown(event){
        currentlyPressedKeys[event.keyCode] = true;
    }


    function handleKeyUp(event){
        currentlyPressedKeys[event.keyCode] = false;
    }

    var pitch       = 0;
    var pitchRate   = 0;

    var yaw         = 0;
    var yawRate     = 0;

    var xPos        = 0;
    var yPos        = 0.4;
    var zPos        = 0;

    var speed       = 0;

    function handleKeys(){
        yawRate = 0;

        if (currentlyPressedKeys[33]){
            // Page Up
            pitchRate = 0.1;
        } else if (currentlyPressedKeys[34]){
            // Page Down
            pitchRate = -0.1;
        } else {
            pitchRate = 0;
        }

        if (currentlyPressedKeys[37]){
            // Left cursor key
            yawRate = 0.1;
        }
        if (currentlyPressedKeys[65]){
            // key A
            //yawRate = 0.1;
            xPos -= 0.1 * Math.cos(degToRad(yaw));
            zPos += 0.1 * Math.sin(degToRad(yaw));
        }
        if (currentlyPressedKeys[39]){
            // Right cursor key
            yawRate = -0.1;
        }
        if (currentlyPressedKeys[68]){
            // key D
            //yawRate = -0.1;
            xPos += 0.1 * Math.cos(degToRad(yaw));
            zPos -= 0.1 * Math.sin(degToRad(yaw));
        }

        if (    currentlyPressedKeys[38]
            ||  currentlyPressedKeys[87])
        {
            // Up cursor key or W
            speed = 0.003;
        } else if ( currentlyPressedKeys[40]
            ||      currentlyPressedKeys[83])
        {
            // Down cursor key
            speed = -0.003;
        } else {
            speed = 0;
        }
    }

    var lastTime        = 0;
    // Used to make us "jog" up and down as we move forward.
    // var joggingAngle    = 0;
    var fps             = 25;
    var widgets         = [];

    function drawScene(){
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        // draw
        mat4.perspective(
            45,
            gl.viewportWidth / gl.viewportHeight,
            0.1,
            100.0,
            pMatrix
        );

        mat4.identity(mvMatrix);

        mat4.rotate(mvMatrix, degToRad(-pitch), [1, 0, 0]);
        mat4.rotate(mvMatrix, degToRad(-yaw), [0, 1, 0]);
        mat4.translate(mvMatrix, [-xPos, -yPos, -zPos]);

        for (var i = 0; i < widgets.length; i++){
            var widget      = widgets[i];
            var class_name  = getObjectClassName(widget);
            widget[class_name]('renderWebGl');
        }

    }

    function animate(){
        var timeNow = new Date().getTime();
        if (lastTime != 0){
            var elapsed = timeNow - lastTime;

            if (speed != 0){
                xPos -= Math.sin(degToRad(yaw))
                    * speed * elapsed;
                zPos -= Math.cos(degToRad(yaw))
                    * speed * elapsed;

                // 0.6 "fiddle factor"
                // makes it feel more realistic :-)
                //joggingAngle += elapsed * 0.6;
                //yPos = Math.sin(
                //    degToRad(joggingAngle)
                //) / 20 + 0.4;
            }

            yaw     += yawRate      * elapsed;
            pitch   += pitchRate    * elapsed;

        }
        lastTime = timeNow;
    }

    function tick(){
        handleKeys();
        drawScene();
        animate();
    }

    function draw() {
        setTimeout(function() {
            tick();
            requestAnimationFrame(draw);
            // Drawing code goes here
        }, 1000 / fps);
    }

    function webGLStart(){
        var canvas = document.getElementById("canvas_main");

        initGL(canvas);
        initShaders();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);

        document.onkeydown  = handleKeyDown;
        document.onkeyup    = handleKeyUp;

        draw();

        renderEmbedded({
            'object_id':    'core.shop',
            'webgl':        1,
            'success':      function(data, a_widgets){
                widgets = widgets.concat(a_widgets);
            }
        });

        renderEmbedded({
            'object_id':    '6b343b6b7b3b88c43d421cedfd2422a45ad7e6fb',
            'webgl':        1,
            'success':      function(a_data, a_widgets){
                widgets = widgets.concat(a_widgets);
            }
        });
    }

</script>

<style type="text/css">
    #loadingtext {
        position:absolute;
        top:250px;
        left:150px;
        font-size:2em;
        color: white;
    }
</style>


</head>

<!-- body -->

<body onload="webGLStart()">

<canvas id="canvas_main" style="border: none;" width="1024" height="768"></canvas>

<!--
<perl1>
    my $ret = '';
    $ret .= processTemplate("widget.tpl");
    return $ret;
</perl1>
-->

</body>
</html>

