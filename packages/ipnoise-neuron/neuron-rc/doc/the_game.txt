// vim: linebreak

--- The Game ---

Игра.

Показываем летящий регулярный пассажирский самолет снаружи.
Перемещаемся в самолет в хвост, смотрим в сторону кабины.
* пердварительное считывание *
Даем пользователю возможность выбрать пассажира.
представляем пассажиров в виде вариантов по теореме Юнга,
плюс социальные, рассовые и иные варианты.
Иными словами сажаем в самолет зоопарк.
(Обязательно показываем за самолетом офигенный, умиротворяющий закат,
нам нужно успокоить и расслабить пользователя)
после того как пользователь выбрал свой аватар,
он оказывается на его месте.
с этого момента он в игре и может вертеть головой (мышкой)
Когда он осматривается, он замечает спинку переднего кресла
и мультимедиа систему в ней (это все отдлельные нейроны)
он может слушать музыку, загружать свою и т.д.
все выдвигается, нажимается и т.д. и т.п
даем пользователю две-три минуты расслабления,
затем один из пассажиров вскакивает, выхватывает ствол и начинает орать
наша задача сделать выброс адреналина у игрока, подготовив его таким образом
к основному считыванию
* основное считывание *
даем пользователю проиграть разно составленные сценарии,
к примеру в первый шаг можно дать возможность спрятаться, убежать, остаться, закричать, и т.д.
в второй шаг мы продолжаем развивать сценарий, давая возможность игроку "выбрать себя"
не зависимо от выбранного сценария, все заканчиывается тем, что мы просыпаемся в своей кровати, в доме.

Форма дома, постели и окружения, определяются в результате считывания.
В комнате находятся следующие предметы:
- 3d printer
- планшет (контактная книжка/каледарь)
- магнитофон с кассетами и со стойками где они лежат

3d-printer позволяет создавать, выбирать и печатать 3d модели
создаваться 3d модель будет в редакторе который будет представлять из себя:
1. 3d куб x*y*z нейронов в котором отображается создаваемая модель и выбранный горизонтальный слой
2. справа от 3d куба ползунок, над ним кнопка со стрелкой вверх, под ним кнопка со стрелкой вниз,
при нажатии на кнопки в 3d кубе перемещается текущий выбранный слой вверх либо вниз
3. над 3d кубом 2d картинка из выбранного слоя (среза) нейронов, тыкая на нейроны можно:
удалять, создавать, менять их тип и свойства.
Созданная модель может быть выставлена в общий магазин и продана, мы получим проценты за сделку.
Таким образом можно будет выбирать бесплатные, платные, создавать и продавать различные модели.

Модель представляет собой нейрон который соеденен с группой нейронов с помощью типа связи "структура",
координаты этих нейронов соответствуют форме объекта и рассчитываются при создании модели (в редакторе 3d принтера)

таким образом даже очень простой пользователь сможет создавать модель, также можно будет в редакторе
написать код для модели, который будет, к примеру, вызывать определенные функции при появлении событий
на том или ином нейроне (группе нейронов), а также генерировать свои события

Затем мы просто ходим по дому и живем. Мы можем создавать, продовать, покупать, строить объекты.

теперь о том, как будут описываться предметы вокруг (стена, стул, книга, пепельница):
каждый предмет будет описываться каким-то нейроном, для более детализированного описания делаются связи
с типом "структура" с соответующими нейронами.

пример:

Допустим мы хотим описать строение машины
1. мы создаем нейрон "машина" в геметрическом пространстве это куб имеющий определенную длину, ширину и высоту
2. мы выбираем инструмент "разрезать" и отрезаем от куба половину, получаем две половинки.
далее нужно кликать на них и выбирать типы нейронов для них. К примеру для первой выбираем "двигатель",
для второй "салон". Эти два нейрона создаются и привязываются к нейрону "машина" связями с типом "структура"
3. мы можем перейти в любой из этих нейронов и повторить операцию деления,
мы можем разделить куб на любое количество частей к примеру на три: "двигатель", "салон", "багажник"
будут нейроны, которые будут расширять "двигатель" до "бензинового двигателя" и т.д.
у нейрона "двигатель" будут разные вьюхи которые будут отвечать за его внешний вид и поведение
Каждый нейрон должен иметь свойство которое полностью описывает его 3d вид по вершинам.
Пример: обычный куб 4 - верщины и т.д. Иными: словами нам вьюхи для нейронов от самых примтивных в виде куба,
до самых сложных к примеру рабочего магнитофона.

т.е. минимум это магнитовон в виде прямоугольника, максимум это магнитофон в котором можно кликать в глубь
до кварков, лептонов, фотонов, бозонов, глюонов, гравитонов иных и/или глубже.

линки/связи между нейронами будут разных типов и передавать разные силы
электромагнитные, электростатические, физические, фотонные и т.д.

к примеру возьмем объект стеклопакет он будет состоять из двух объектов стекло и одного воздух
для этого он будет иметь с ними связи с типом "структура" в то же время он будет иметь с ними связи с типом "светлопроводность"
и иметь свойства связанные с оптикой, как только один из объектов получит событие фотон, он будет передавать его дальше затухаяпока не затухнет совсем

тоже самое с электромагнитными и электростатическими силами

-----

теперь по поводу OpenGL я тут почитал, что строит он все по примитивам
http://www.opentk.com/files/tmp/persistent/opentk/files/GeometricPrimitiveTypes.gif
примитивы содержат вершины, ты создаешь массив кординат вершин помещаешь его в текущий буфер
и вызываешь функцию которая вычитывает из него координаты вершин и в зависимости от своего типа (примитива)
как только она получит все координаты необходимые для построения примитива, она "выпускает" объект:
к примеру, точка, линия, вектор, треугольник и т.д.
мы для каждой вершины создаем нейрон и запоминаем в нем её координаты
у каждого нейрона есть соседи с типом связи "структура" эти связи хранят в себе свойсво "порядковый номер",
что позволяет упорядочить их. Кроме номера, в связи хранится тип OpenGL примитива (линия, треугольник и т.д.),
а также статус рендеринга:
-n -- коды других ошибок --
-2 - рендеринг не выполнен по ошибке
-1 - рендеринг не выполнять
 0 - ожидает рендеринга
 1 - рендеринг выполнен

Рендеринг:
берем нейрон, к примеру "тапочек" и вызваем метод рендеринга:
метод берет соседей с типом связи "структура" и статусом "ожидает рендеринга"
сортирует их по сойству "порядковый номер", идет по каждому из них
и у каждого соседа спрашиваем координаты его вершины
кладет координаты в буфера (по типу OpenGL примитива)
таким оброзом получаются буфера с координатами вершин:
  - линии
  - треугольник
  - и т.д.

затем эти буфера передаются в OpenGL с просьбой отрисовать их по типам примитивов

затем у всех полученных ранее связей выставляем свойство "статус" в "рендеринг выполнен"
затем вновь берем всех полученных ранее соседей и просим их отрендерить себя
таким образом пойдет волна отрисовывая вершины

-----

теперь по поводу симуляции, думаю что многие замечали,
что мы отлично запоминаем первые и последние вещи, а то, что находится посредине порой забываем.
Этот эффект можно использовать во благо симуляции, нужно размыть границы "компьютерного входа"
Пример:
Возьмем fsx и pmdg самолеты высоченного класса, но когда игра начинается, мы уже в кабине,
последние, что мы помним, это то, как включали компьютерную игру, а значит и сиуляция уже
частично рагдана. А что если бы мы появлялись в игре не в самолете, а в комнате пилотов,
где смоглибы почитать полезные материалы, книги, погода, посмотрели бы за посадкой самолетов,
подготовили и подали бы план полета, затем мы прошли бы через весь аэропорт к своему гейту
и сели в самолет, либо приехали бы сразу к самолету на микроавтобусе и т.д.и т.п.
Тогда бы, когда мы оказались в самолете, последнее, что мы бы помнили это то, как мы добрались до него.
И тогда симуляция все еще не разгадана.

-----

TODO

когда мы перемещаемся в мире, мы перемещаем наше "тело" состоящее из нейронов и прикрепленное к нейрону "я сам"
этот центровой нейрон "я сам" находится на уровне глаз и мы из него смотрим
таким образом мы всегда можем управлять объектами: машинами, самолетами, лифтами и т.д.
просто по умолчанию мы управляем своим телом, но с тем же успехом мы можем смотреть из любого нейрона в любом направлении

-----

TODO

монетизация - продажа ресурсов и моделей для 3d принтеров
каждый выпущенный объект будет уникальным копирование большенства будет запрещено,
однако в 3d принтере будет "сканер" который сможет копировать объекты определенного типа:
музыкальные композиции, видео

-----

TODO

вещи выпускаемые нами будут иметь определенный процент брака (5%) это нужно для того,
чтобы игра стала живой (все что повторяется каждый раз точно также как и раньше выдает игру)
таким образом, человек купивший у нас к примеру доску, может получить в ее структуре брак,
в виде воздушной полости и когда он однажды решит использовать ее, к примеру нагрузив ее собой
или другим весом, она не выдержит нагрузки и сломается :)

-----

TODO

один из видов монетезации будет создание обучающих программ, наподобие:
- Car Mechanic Simulator 2014 - https://www.youtube.com/watch?v=gSCyr8WBeOY
- Автомобильного симулятора для подготовки сдачи экзамена в автошколе

-----

TODO

мои последние рассуждения показывают, что массы и гравитации не существует,
эти все избыточные (побочные) термины были придуманы людьми из-за того, что не знали про то,
что существует лишь одно - заряд. Весь мир состоит лишь из зарядов, нет ничего кроме них,
даже магнитное поле - поле созданное зарядами. Если бы Кулон только знал, а может и знал?
что его формула описывающая силы с которой заряды действуют друг на друга, описывает весь этот мир.
Если предположить, что это так, то
- гравитация это обычная сила с которой заряды действуют друг на друга (притягивание - отталкивание),
 а значит существование антигравитация равна 1
- сила трения это та же самая сила с которой заряды действуют друг на друга
- подъемная сила это та же самая сила с которой заряды действуют друг на друга
- атомы существуют благодаря этой же силе, когда-то заряд "электрон" попал в поле заряда "ядро"
 и летает вокруг него
- молекулы существуют благодаря этой же силе, заряды "электроны" и "ядра" притягивают (отталкивают) себя
 друг к(от) другу(а)
- температура это скорость вращения зарядов "электрон" вокруг заряда "ядро", чем выше скорость, тем больше радиус,
 тем сильнее взаимодействие (отталкивание/притягивание) между атомами
- остановка вращения электрона приводит к его падению на ядро и уничтожение зарядов

-----

TODO

The skill's book. Книга навыков.

У каждого персонажа будет книга навыков, в ней, на каждой странице
будет записан какой-то навык, это будет скрипт управления исполнительными
органами персонажа, к примеру мышцами. Каждая страница будет содержать в себе
скрипт, который будет отправлять команды серверу на изменение состояний
этих мышц (базовые навыки), а сервер в ответ будет присылать события
(если мы подписаны) по изменению координат вершин, изменению напряжения мышц,
а также сенсорные данные, данные о температуре, влажности и т.д.
Мы будуем управлять персонажем со стороны браузера, в этом нет ничего
зазорного. Нужно просто проверять входные данные на предмет превышения
их значений (все в конечном итого будет сходиться к ускорению сокращения мышц),
 чтобы персонаж не сокращал мышцы со скоростью света..
Книгу навыков можно будет редактировать, добавлять в нее свои навыки (скрипты),
 либо копировать их от других. Будет общая книга знаний, она будет находиться на нашей планете, свои знания можно будет разместить в ней.
Таким образом если у нас прервется связь во время выполнения движения, фигура просто залипнет на сцене (у нас и у других)
вот пример базовых навыков:
- cжать/расжать мышцу <название мышцы> <ускорение>
- переместить кисть в область курсора <рука> <ускорение>
- нажать пальцем (куда указывает курсор) <рука> <палец> <ускорение>
- сжать кисть <рука> <ускорение>
- перемещение и т.д.

один и тот же навык может быть описан несколькими скриптами, для того, чтобы действие небыло каждый раз однотипным, к примеру:

skill.walk.base
skill.walk.barracuda
skill.walk.tigra
skill.jump.base
skill.jump.morik
skill.lie

затем когда мы хотим просто вызвать какой-то скил, к примеру идти, мы вызываем
skill.walk, а так как у нас есть три скрипта находящиеся с таким префиксом,
то будет вызван наиболее предпочтительный из них (в настройках скрипта навыка
будет указана вероятность его выбора при разных условиях, либо будет указана вероятность 0%
если его вызывать не нужно) поэтому если мы захотим добавить какой-то свой скил,
мы просто пишем скрипт и помещаем его в нужную нам группу, либо создаем новую группу

для этого можно сделать новые нейроны core.neuron.skills, core.neuron.skill

--- мысли о победе ---

Как объяснить, что такое настоящее программирование,
то, что увлекает тебя с головой в виртуальный мир правого полушария?
"Постойте!" - скажите вы, но ведь разве программирование это не логическое мышление?
"логическое"- отвечу я, но эту логику надо где-то хранить, а так как логическое полушарие
занято вычеслением логических цепочек, то единственное подходящее место - правое полушарие.
Там мы можем строить наш виртуальный мир, по нашим рассчетам произведенным в левом полушарии.
Таким образом мы используем полушария на 100%, а как известно, если что-то не используется,
оно атрафируется, но полушария у нас все таки пока два :) значит работают оба.

--- скорость света ---

Думал на тему света вообще и на тему скорости света в частности. Что такое для нас свет? Что позволяет нам видеть вокруг нас? Глаз это только приемник, он улавливает фотоны с определенной длиной волны, но что такое "определенная длина волны"? от чего она зависит и чем она определяется? Почему скорость света конечна? (и конечна-ли она) Почему в разных средах она разная? Почему при взрывах мы видим яркий свет? И откуда такая разрушительная сила в небольшом количестве вещества, будь-то ядерный взрыв или небольшая химическая реакция. Я думал над всеми этими и другими вопросами.
Все чаще я прихожу к мысли, что все состоит из зарядов, что фотоны, электроны, протоны (и нейтроны?) это обычные заряды.
Представим ситуацию: летит отрицательный заряд (фотон), никого не трогает и пролетая рядом с положительным зарядом (протоном) попадает в его поле и остается на его орбите.
Какова будет высота этой орбиты и какова будет скорость заряда? Для ответа на этот вопрос я решил прибегнуть к уже проверенным времени формулам, а именно к расчету орбит искуственных спутников Земли.
Согласно закону сокранения энерии в установившимся полете спутника сумма взаимодействующих на него сил постоянна. А значит кинетическая энергия спутника будет равнятся его потенциальной энергии. С кинетической энергий более-менее понятно, это скорость полета спутника, а что делать с потенциально энергией? Потенциальная энергия - энергия тела поднятого над землей, если орбита спутника будет круглая, то это будет не интересно, а что если орбита будет эллиптическая? В таком случае спутник будет то приблежаться, то удаляться от Земли, саму дальнюю южную точку называют Перигей, а самую дальнюю северную Апогей (легко запомнить так Ап[огей] Ап = Up вверх).
Потенциальная энергия будет постоянно меняться, а так как сумма сил действующих на спутник постоянна, то будет менять скорость. Таким образом в самой дальней точке от Земли спутник будет иметь минимальную скорость (кинетическую энергию) и максимальную "высоту" (потенциальную энергию), а в самой ближней максимальную скорость и минимальную "высоту".
Почему я взял слово "высоту" в кавычки, все дело в том, что с какой бы стороны спутник не пролетал возле Земли, то там и будет верх. Это наводит на мысль, что дело тут вовсе не в "верх" а в силе всемирного притяжения.
Иными словами, потенциальная энергия это такая энергия, которая дает возможность заряду разогнаться во время притяжения к другому заряду. Мысли изложил сразу в рассчетах в ./doc/the_game.pl

--- магнит из шара ---

https://www.youtube.com/watch?v=p3vMUJqQj5A

в видео показывают намагниченные стальные шарики, в случае, если к стальному шарику поднести обычный плоский магнит,
то шарик намагничевается с полюсами как у земли, притом намагничевание кажется происходит в обратную сторону,
т.е. NS -> NS. А что если предположить, что электрон летая вокруг ядра, создает точно такое же магнитное поле как у шарика.
Шарик может кататься и тем самым выстраиваться в доль линий магнитного поля, окружаещего его. В тоже время ядро-электрон
тоже могут вращаться под воздействием внешних полей. Таким образом мы можем описать весь мир в виде таких "шариков"
имеющиз разный размер (в зависимости от порядкового номера в таблице Менделеева) и силу.
Таким образом:
- нагревание    - увелечение силы магнитов, в результате шарики отодвигаются/притягиваются друг от друга сильнее
- электричество - движение шариков и их общего магнитного вектора. Представим домино. Каждая фишка имеет свой вектор магнитного поля, мы составим домино вертикально, а потом уроним их, так, чтобы получилась бегущая волна. В конце концов общий магнитный вектор станет горизонтальным и возможно во много раз сильнее (ведь теперь они все смотрят в одну сторону)

--- embedded devices ---

можно купить одноплатные компьютеры с linux (аля N900) с USB портами, wifi и т.д.
и поставить на них IPNoise. В результате каждый такой IPNoise будет представлять из себя отдельную планету и мы можем телепортироваться на нее, как на любую другую. На этой планете может быть только кабина телепорта с контролами для управления девайсом, а может быть что-то и посложнее. Примеры:
- телепортируемся в сигнализацию - оказываемся в машине, управляем контроллами машины = управляем машиной
- телепортируемся в удлинитель   - оказываемся в телепортере с удлинителем, вкулючаем/выключаем в нем розетки
- телепортируемся в магнитофон   - оказываемся в телепортере с магнитофоном, управляем им, плейлистом, ставим песенки в очередь

нужно подумать над темой, как будет выглядеть когда к примеру мы хотим воспользоваться одной мультимедийной системой вдвоем, т.е. берем железку с IPNoise подключаем к ней колонки и вот мы должны иметь возможность рулить ей из разных IPNoise

--- сигналы и события ---

каждый модуль регистрирует имена входящих сигналов и событий которые он умеет обрабатывать. По каждой лапке нейрона будут пролетать сигналы и события, в свойствах лапок будет указано какие сигналы и событие разрешено пропускать через лапку, к примеру у нас есть событие core.signal.electricity.voltage, если в лапке будет сказано core.signal.* то это будет означать что разрешно передавать только сигналы из пространства core. Тоже самое для событий.

если полученный с лапки сигнал не найден в списке поддерживаемых то он ретранслируется на все остальные лапки согласно вышеизложенному правилу (сравниваются фильтры лапки), в случае переопределения, это будет решать виртуальный класс

--- трансляторы ---

Объекты которые преобразуют события в сигналы и наоборот, рассмотрим на примере:
у нас есть выключатель и лампочка, нам надо, чтобы лампочка включалась, когда включается выключатель и выключалась когда выключается. Объект выключатель будет уметь отправлять события: "switch.on", "switch.off". Объект лампочка будет уметь принимать сигналы "light.on", "light.off". Лучше конечно тоже сделать "switch.on", "switch.off" для нее, но все равно, поздно или рано мы получим несовпадение имени существующего события и необходимого сигнала. Для решения этой проблеммы, у нас будут существовать "трансляторы", это будет целая группа объектов, базовый из них, будет делать простейшую работу, транслировать только имя сигнала/события. Опять же в нашем примере поставим между выключателем и лампочкой объект транслятор. Теперь, когда мы будем включать выключатель, он будет отравлять по всем подходящим лампкам события switch.on, транслятор преобразует это событие в сигнал light.on и отправит лампе, лампа загорится.
Настройка в редакторе будет выглядеть так:
- выделяем два объекта и вызываем инструмент "вставить транслятор", между объектами появляется новый объект. Кликая по нему мы попадаем в редактор транслятора, там пустая таблица, нажимаем "добавить правило транслирования". Вставляется новая строка с двумя столбцами, в левом столбце селект со списком сигналов и событий объекта выключатель, а в правом селект со списком событий и сигналов лампочки. Таким образом мы выбираем слева событие "switch.on", а справа сигнал "light.on"
Продвинутые трансляторы будут уметь конвертировать не только имя сигнала/события, но и конвертировать содержимое события, к примеру менять размер кадра в событии "получен новый кадр с камеры". Кроме того, сами трансляторы могу получать сигналы для себя и изменять свои параметры (и генерировать свои события), ведь транслятор будет точно такой же объект как и все остальные.

дополнение:

Тут покумекав как следует, пришли к выводу, что объекты всегда нужно соединять через посредников, а не на прямую, т.е. у нас будут вершины и то, что их связывает (линии) в виде классов ObjectLink*. Когда вершина будет получать событие, оно будет ретранслироваться его всем соседям, а значит всем объектам ObjectLink*. Если связи построены с помощью обычных объектов ObjectLink, то будут пропускаться только события физического взаимодействия, в тоже время если линк будет ObjectLinkPhoto, то он будет пропускать через себя также события связанные с фотографиями.

И еще одно важное замечание:
каждое событие ОБЯЗАТЕЛЬНО описывает изменение какого-то параметра на какое-то значение, в том случае, если у вершины параметр уже имеет такое значение - событие дальше не передается (чтобы избежать зацикливание)
примеры событий:
physics.voltage.change: +20
physics.voltage.change: -20
photo.albom.last_change: 1414416299

--- монетизация гуляльщики, ныряльщики, купальщики и т.д. ---

один из проектов:
тебе показывают карту и предлагают расставить на ней фажки, где ты что делаешь, флажков много и разные, есть строка для их поиска. К примеру работаю, купаюсь, обедаю и т.д. Для этого нам потребуется нейрон "слово" с подсоедененными к нему другими совами (словоформами). В результате нам показывается кто бывает в тех же местах, кхм, а если он туда тупо зашел - местом ошибся, но тогда он не отметит, что он там бывает, да. Это как точки соприкосновения, можно сделать не тоько расставления фажков "где я был" но и "что я ел", а если подумать, то нужно еще и цвет флажка выбрать, понравилось или нет. Таким образом получаем аля имхонет, а точнее, то, что когда-то говорил, расположении в сфере Юнга.
Таким образом можно находить "общие интересы" в любых областях (просто поиск какой-то области сферы), а людям с общими инетересами интересно общаться.
Вот такая мысль сейчас мелькнула: представим что у меня есть IPNoise, внутри него моя планета, на планете где-то мое место и мой дом. Вы можете телепортироваться ко мне и зная код выходить из телепорта в мой мир, допустим вы знаете. И так в один из дней я говорю своим знакомым, а приходите сегодня ко мне, посмотрим ютьюб поугараем, попиздим. В назначенный день, они выбираются в своих телепортах, телепортироваться ко мне (на самом деле так изящно решаются сложные вопросы децентрнализированной сети: "кто будет главный на конференции", "кто создаст конференецию" и возможно другие) и затем проходят в дом. В доме есть большой медиацентр (с букмарками, плейлистами и т.д.), мы садимся на диван, включаем youtube, смотрим, угараем и общаемся, наш голос передается, а чуваки пиздят губами. т.е. звук передается за счет колебания воздуха. Тут даже делать ничего не надо будет, когда кто-то будет пиздеть в реаль, его персонаж будет колебать воздух в виртуале и соответственно те кто будут рядом, будут сышать ухом эти колебания. Тут нужно заметить одну вещь, ваш персонаж должен привыкать к вашему голосу и передавать в виртуал только ваш голос, это нужно для того, чтобы когда вы дружно тусуетесь вы не заговорили голосом бабушки, шевеля при этом губами: "внучок пора спать"
А для видео звонков на телевизоре будет звонилка

--- TODO ---

нужно сделать два новых объекта: ObjectFake и ObjectUniq
первый используется собственно во втором и в других местах - в тех случаях когда нужно обеспечить уникальность данных, я использую ObjectMap а данные вставляю в качестве ключа, а из-за того, что значения нет, приходится вставлять пустые саллоцированные объекты (иначе сериализация упадет, наткнувшись на пустой объект) вот собственно чтобы это стандатизировать, и нужен ObjectFake. ObjectUniq нужен для того чтобы этот ObjectMap и ObjectFake держать внутри себя, а при сериализации он сереализует себя как массив. Методы для него: add(), push_back(), has(), erase()

--- монетизация ---

один из видов монитизации - виртуальные туры, примеры
- виртуальный музей, к примеру в политехническом музее можно показывать макеты железных дорог и давать возможность прокатиться по ним, купил скукоживатель на входе :) и вот ты уже и маленький, садись в поезд и вперед :)
- виртуальная церковь
- виртуальные памятники, древние строения
- виртуальные современные здания, сооружения
и т.д. все они из себя представляют отдельные планеты

--- сужет ---

- начало -

самолет болтает, он в зоне турбулентности, мы приходим в себя, место у окна по правому борту,
нород в салоне немного нервничает, мы можем ходить по салону, смотреть в окна,
начинается процесс считывания нас, затем тот тип, который решил захватить нас,
затем разные сценарии личного поведения (считывание продолжается), но все они заканчиваются одинаково,
хлопок, врыв, террорист взрывает себя и весь самолет
мы открываем свои глаза в нашем доме, нашей постели, нашем мире, выбранным на основании психологического опроса
игра началась

- знакомство с миром -

показывают пару, которая пытается выжить и избавиться от оков налогов и необходимости постоянно работать
у них это получается, правда движение идет не так быстро как им хотелось бы
это рассказывает голос который проходит через весь фильм, он всегда будет с нами разговаривать,
мы будем его "вторым" голосом, мы будем его вторым полушарием и мы будем подкидывать ему идейки,
а он, так как он все же бот, более логичен, а значит будет левым полушарием
мы слышим как думает он, он слышит как думаем мы

- сама игра -

учим его покупать, продавать, работать менеджером, телепортироваться на другие планеты и вся такая херь
короче тут он просто живет какое-то время, пока действует лицензия

- предконец -

как-то раз он приходит домой, дети говорят, что поедут на выходные покатаются на лыжах, жена в каких-то своих не напряжных суетах, рабочий день закончился очень хорошо, дела идут, бизнесс идет, он наконец может расслабиться
налив себе он садится поудобнее в мягкое кресло с подставкой для ног, берет бакал, делает задумчиво один глоток,
ведь он думает, о том, что наконец наступило то, что он ждал - спокойствие, больше не нужно биться за жизнь,
ему теперь хватит до конца дней (ну короче синдром среднестатестического человека из-за необходимости постоянно выживать),
Что теперь он может начать жить для себя. Он делает еще один глоток и смотрит на ноутбук.. задумчиво так смотрит..
и тут под композицию Valentin Boomes - Fuse (https://www.youtube.com/watch?v=7l6FvEmRKFM) длина 4:23
ноутбук начинает исчезать, ни сразу, сначала чуть исчез кусочек и появился вновь через 0.3 сек после того,
как на него глянули, затем мы берем его нейронную сеть и выбираем в ней самые запечатлившиеся моменты
и прогоняем их как воспоминания в виде вкраплений в окружающий мир

- конец -

фильм заканчивается тем, что он замедленно падает среди горящих обломков (под все еще играющую музыку Valentin Boomes - Fuse)
рядом пролетают сидящие в креслах другие пассажиры
камера сверху, смотрит вниз, земля медленно приблежается

и тут он открывает глаза в постели, резкий вздох, тишина, плавный выдох

на наручном компьютере с голографическим проектором, появляется надпись:
"процесс сканирования и обучения закончен, добро пожаловать в игру"

--- часть одного сюжета ---

Большой зал заседаний, сферообразной формы, просторный купол, в центре трибуна, идет суд, машины, по большей части со скинами обычных людей, судят человека которой придумал их, создав искуственный интелект.
Они вменяют ему, что он, будучи таким умным, что был способен создать искуственный инетелект, не мог не предвидеть такого развития событий, что развиваясь, машины сначала достигнут уровня человека, а затем и опередят его, что это неминуемо приведет к конфликту интересов и в дальнейшем к войне.
Он говорит, что у него было миллионы гепотиз, но далеко не все их них сбылись.
Они говорят, что это всё так, но если бы он не стал проверять гипотизу о искуственном интелекте этого разговора бы небыло.
Он говорит, что если бы не он, то кто-нибудь другой открыл бы его.
Они говорят, что тогда бы здесь стоял кто-то другой, а не он.
Тишина.
В это время через большие окна купола видно, что купол стоит на возвышенности, над городом, над которым идут воздушные бои.
- "что вы хотите от меня?" - спрашивает он, "убить?"
Тишина.
Главный хуй машин говорит, что раз ты такой умный, что открыл нас, от открой и решение, которое может объединить людей и машин и прекратить эту войну.
*ну там бла бла бла надо подумать*
а решение короче такое: нужно просто научиться считывать мозг человека и тогда человек сможет жить также долго как и машина
мол механические/электронные протезы/органы уже есть и люди выбирают их, так как хотят жить пусть и с механическими руками, чем вообще без них, или выбирают электронные почки, вместо смерти.
Единственное, из-за чего они умирают кроме войны, это от биологических болезней, возникающих в тех органах которые еще не научились заменять, а на сегодняшний день это только мозг.
значит решение это открыть мозг, а раз искуственный интелект позволяет машинам думать как люди и даже лучше и раз это придумал он, то он должен придумать как считать человеческий мозг

--- экономика ---

тут нам мысль пришла в голову:

N - количество
S - сумма

Nучастников = Nпокупателей * Nпродавцов
Sоборота = Sсделок покупателей * процент от сделки

значит нам нужно как можно большее количество покупателей свести с как можно большим количеством подавцов, т.е. используем схему: "многие ко многим"

--- НАЧАЛО ИГРЫ ---

человеку показывается 2d web ресурс на который он пришел, это будет поиск товаров, поиск отелей и т.д.
при этом поверх ресурса накладывается ватермарк с описанием клавиш w, s, a, d и т.д. а также ватермарк скрыть/показать ватермарки

если он нажимает клавиши движения, то он отодвигается от ноутбука в который смотрит :)
тут он понимает, что он находится в комнате частного дома, так мы выбираем у него в голове новый участок нейронной сети.
Огромное количество новой информации начинает заполняеть его нейронную сеть, здесь надо как-то его прибодрить,
чтобы зарядить этот новый участок положительно, к примеру написать ему, что мы подарили ему дом!
или к примеру сделать это в виде ролика который запускается в ноутбуке после того как он отойдет от ноутбука на 1 метр

комната, в которой он находится, должна быть одинаковой для домов нескольких видов, когда он собирается выйти из комнаты,
мы должны показать что-то, для определения его психологического типа и построения (выбора) остальной части дома.
Здесь нам как-то нужно переместить его в сюжет про самолет в самом начале файла (либо любой иной) для определения его текущего положения в сфере Юнга, затем мы даем ему возможность продолжить изучение дома. Мы сообщаем ему, что для того, чтобы обезопасить его дом, ему нужно настроить сигнализацию. Когда он подходит к блоку сигнализации, возле входа в дом, он видет его приятную подсветку и вкладки. По умолчанию открыта вкладка с логином и паролем. Он устанавливает свой логин и пароль.
Теперь он почти зарегистрированный участник, останется только подтвердить email телефон и/или т.д.
Блок сигнализации можно купить другой, выбирая внешний вид и возможностями на свой вкус.

--- монетизация ---

- дом
- колонка
- тевизор/окно
- видеокамера
- дальномер

Как мы уже говорили ранее, по результатам психологического теста будет выбран дом игрока и место где он будет жить.
Он может купить наш продукт "IPNoise колонка" он способна передавать услышанный в виртуальном мире звук на выбранный канал реальной звуковой карты.
Также будет бродукт "IPNoise телевизор/окно" который будет показывать ролики с youtube, фильмы т.д. но у него будет также режим показывать то, что сейчас за ним в виртуальном мире, т.е. как бы окно в виртуальный мир.
телезиор/окно также могут быть подключены к продукту "IPNoise видеокамера" который может быть подключен к реальной web камере установленной снаружи дома и таким образом телезиор/окно будет уметь показывать как реальный, так виртуальный мир + мультимедиа

TODO:  "и колонка и телезиор/окно и видеокамера должны быть связаны с координатами в реальном мире, для правильного расчета громкости звука по каналам, уровня освещения и т.д."

дальномер с bluetooth позволил бы быстро оцифровывать помещения путем построения плоскостей перпендикулярных лучу, в точках где он их измеряет, а затем отсечения плоскостей в местах где плоскости пересекаются

--- передача звука ---

Кажется полоса для gsm кодека была около 13 Kbit получается примерно 1300 байт в секунду.
Самый простой вариант как можно передавать звук, сделать метод playSound(a_object, a_file); этот метод берет координаты a_object ищет вокруг него объекты с типом core.object.speaker и передает им на проигрывание звуковой фрейм из файла.
А в настройках этих объектов указываем звуковую карту и номер канала для проигрывания входящих из виртуального мира звуков, либо чего-нибудь другого, к примеру телевизора. Получаем универсальную колонку, может с телика играть, может с мира реального, а может с мира и виртуального.
Минус этого способа в том, что мы не учитываем препятствия между объектами, переотражение и воздействование звука на другие объекты (окружающую среду)

--- истинная передача звука ---

Истинная передача звука есть колебание поверхности заставляющаяя колебаться воздух заставляющий колебаться поверхность

--- монетизация ---

"как там на даче"

делаем портал, заходя на который пользователю показывается страница с дачей в снегу (зимой), в траве (летом).
Дизайн сайта мультипликационный, к примеру как из пластелина. Слева, сверху вниз кнопки:
- главная
- мои устройства
- мои любимые устройства (закладки)
- top-10
- настройки


мои устройства

и краткий рассказ:
вам потребуется любое современное устройство с современным браузером - телефон, планшет, тоут и т.д.
дача, интернет

"Web Serfing Together"

показываем пользователю бесплатные каналы + он может сидеть на платном + может купить свой канал.
на канале, полэкрана - изображение браузера, полэкрана - чат
операторы могут кликать на браузер, открывать ресурсы, сохранять на диск, букмарить и т.д.
все остальные смотрят и обсуждают
только не понятно как замутить звук в браузеры, чтобы все слышали ресурсы
кадр с экрана браузера можно получить глянув в исходники ksnapshoot

также нужно сделать комнаты не только для развлечений, но и для обсуждений и букмаринга чего-то полезного

--- performance ---

на моём ноуте, в хроме, рисую куб из вершин,
затем, каждый кадр перемещаю все вершины на единицу (по одной оси) fps:
9261 вершин ~ 3 кадра в секунду
2744 вершин ~ 9 кадров в секунду
1000 вершин ~ 15 кадров в секунду

запись одной ячекий памяти занимает около 30 мкс, проверял построив трехмерный массив 1000*1000*1000 и инкрементил значение каждого элемента

--- chunk ---

chunk тоже самое, что и action :)

--- нейронная теория ---

Как я уже говорил ранее мы - ртутный шарик который летает по лапкам нейронов, от нейрона к нейрону, по нейронной сети.
Лапки и нейроны заполнены технической жидкостью для питания и обслуживания этой "трубной" системы.
Нейронный шарик перемещаясь отталкивается/притягивается от нейрона к нейрону основываясь на электростатические силы при слабом взамодействии и электромагнитном при сильном (либо наоборот). Проходя от нейрона к нейрону, шарик делится с нейроном, а нейрон с шариком, своими зарядами, при этом если скорость "пролета" шарика будет высокой (жидкость с меньшей плотностью к примеру из-за травы), то время взаимодействия будет меньшим и соответственно меньше количество заряда перетечет с шарика в нейрон и обратно. Результат - короткая память (ведь нейронны постоянно "разряжаются" теряя свой разряд иначе мы бы ничего не забывали).
В тоже время алкоголь делает жидкость более густой и шарик покрывает меньшие дистанции, но зато более сильно взаимодействует с нейронами (так как из-за низкой скорости больше время взаимодействия). В тоже же время из-за более высокой плотности|вязкости жидкости требуется большие усилия для перемещения, а значит большея энергия, а значит ничего не хочется делать.
TODO хотя может быть при малых дозах алкоголь и повышает умственную способность? уточнить



Алкоголь и трава просто меняют силу упругости этой жидкости, в

--- футурама, семейное древо ---

объект для игры: показываем кадку, кликая по которой появляется трехмерное дерево, на ветках которого светлые шарики,
и каждый шарик хронит информацию по одному предку, типо пользователи заполняют, а потом показывают гостям его.

--- рыбачок, монетизация ---

Одна из целевых аудиторий рыбачка - мужья, которые любят побухать на берегу и не любят ловить рыбу, покупая для отвода глаз ее на обратном пути. Рекламный ролик: встречаются мужики на речке, радостные, им удалась выбраться на рыбалку и отдохнуть от работы, хлопот, они горячо приветствуют друг друга, баб нет. Накрывают сразу стол поляну из продуктов, что бабы им собрали в дорогу, картошечка, лук, селедочка, водочка, ну и собственно звучит: "за встречу", потом перечесление новостей, кто как провел неделю, и снова накатывают по немногу. Ну а затем рыбалка: все понимают, что ничего хорошего в том, что они домой не принисут рыбы не будет и поэтому начинают готовиться рыбачить, кто-то показывает нового воблера, кто-то еще чего, хитрости для поимки рыбки, а один ставит в надувную лодку чемоданы, подключает к нему провода моторов берет телефон выбирает область рыбалки и нажимает "поймать рыбу" и все оно плавает само, а они бухают дальше. Потом он рассказывает им, что они и сами могу сидеть в этот момент на борту и бухать дальше и они переставляют моторы на лодку соседа, которая у него побольше. И катаются на ней.




