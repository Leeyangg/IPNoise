diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/main.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/main.c
index c254421..6e764ca 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/main.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/main.c
@@ -91,32 +91,33 @@ int32_t main(
     //}
 
     if (1){
-        Object          *ret     = NULL;
-        ObjectString    *path    = NULL;
-        Object          *context = NULL;
+        Object  *ret        = NULL;
+        Object  *window     = NULL;
 
         // alloc context
-        context = object__constructor_window();
-        if (!context){
+        window = object__constructor_window();
+        if (!window){
             PERROR("object__constructor_window() failed\n");
             goto fail;
         }
 
         // prepare path
-        path = object_string__constructor_str(
-            "test.js",
-            context
-        );
-        if (!path){
-            object__ref_dec(context);
-            PERROR("object_string__constructor() failed\n");
-            goto fail;
-        }
+        //path = object_string__constructor_str(
+        //    "test.js",
+        //    context
+        //);
+        //if (!path){
+        //    object__ref_dec(context);
+        //    PERROR("object_string__constructor() failed\n");
+        //    goto fail;
+        //}
+
+        OBJECT__DUMP(window, "window:\n");
 
         // parse
         ret = object__parse_file(
-            context,
-            path
+            window,
+            "test.js"
         );
 
         //object__dump("parser: '%s'\n", (Object *)parser);
@@ -126,12 +127,12 @@ int32_t main(
             ret = NULL;
         }
 
-        OBJECT__DUMP(context, "main, context:\n");
+        OBJECT__DUMP(window, "main, window:\n");
 
-        object__ref_dec((Object *)path);
+        //object__ref_dec((Object *)path);
         // because of things in context can ref on context,
         // we cannot free it via object__ref_dec
-        object__destructor_cb(context);
+        object__destructor_cb(window);
     }
 
     // all ok
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object.c
index 93ab18d..1ca1c93 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object.c
@@ -5,6 +5,7 @@
 #include <math.h>
 
 #include "log.h"
+#include "id.h"
 #include "object_code_define.h"
 #include "object_code_call.h"
 #include "object_action.h"
@@ -19,6 +20,9 @@
 
 #include "object.h"
 
+Cache *g_cache = NULL;
+
+/*
 // ---------------- list_item ----------------
 
 void list_item_free(
@@ -163,7 +167,7 @@ fail:
     goto out;
 }
 
-int32_t list_item_right(
+int32_t object__neigh_get_right(
     ListItem        *a_list_head,
     ListItem        *a_pos,
     ListItem        **a_out_item,
@@ -210,41 +214,38 @@ fail:
     }
     goto out;
 }
+*/
 
-// ---------------- object key ----------------
+// ---------------- key ----------------
 
-void object_key__destructor_cb(
-    Object *a_object)
+void link_name__free(
+    LinkName *a_link_name)
 {
-    ObjectKey *object = NULL;
-
-    if (!a_object){
-        TFATAL("missing argument: 'a_object'\n");
+    if (!a_link_name){
+        TFATAL("missing argument: 'a_key'\n");
     }
 
-    object = container_of(a_object, ObjectKey, super);
-
 #ifdef __x86_64__
-    PDEBUG(100, "object: (0x%lx)\n", (uint64_t)object);
+    PDEBUG(100, "object: (0x%lx)\n", (uint64_t)a_link_name);
 #else
-    PDEBUG(100, "object: (0x%x)\n", (ukey_t)object);
+    PDEBUG(100, "object: (0x%x)\n", (uint32_t)a_link_name);
 #endif
 
-    object__destructor_cb((Object *)object);
+    if (a_link_name->mem){
+        free(a_link_name->mem);
+        a_link_name->mem = NULL;
+    }
+
+    free(a_link_name);
 }
 
-ObjectKey * object_key__constructor()
+LinkName * link_name__alloc()
 {
-    ObjectKey   *object = NULL;
-    uint32_t    size    = sizeof(*object);
+    LinkName         *key    = NULL;
+    uint32_t    size    = sizeof(*key);
 
-    object = (ObjectKey *)object__constructor_uint32_t(
-        "object_key",   // type
-        "",             // class name
-        size,
-        NULL            // prototype
-    );
-    if (!object){
+    key = (LinkName *)calloc(1, size);
+    if (!key){
         PERROR("cannot allocate memory,"
             " was needed: '%u' byte(s)\n",
             size
@@ -252,184 +253,379 @@ ObjectKey * object_key__constructor()
         goto fail;
     }
 
-    object->super.destructor_cb = object_key__destructor_cb;
-    object->super.serialize_cb  = object_key__serialize_cb;
-
 #ifdef __x86_64__
-    PDEBUG(100, "object: (0x%lx)\n", (uint64_t)object);
+    PDEBUG(100, "key: (0x%lx)\n", (uint64_t)key);
 #else
-    PDEBUG(100, "object: (0x%x)\n", (uint32_t)object);
+    PDEBUG(100, "key: (0x%x)\n", (uint32_t)key);
 #endif
 
 out:
-    return object;
+    return key;
 fail:
-    if (object){
-        object__ref_dec((Object *)object);
-        object = NULL;
+    if (key){
+        link_name__free(key);
+        key = NULL;
     }
     goto out;
 }
 
-ObjectKey * object_key__constructor_str(
-    const char  *a_str,
-    Object      *a_prototype)
+LinkName * link_name__alloc_str(
+    const char  *a_val)
 {
-    ObjectKey *object_key = NULL;
+    LinkName *link_name = NULL;
 
-    object_key = object_key__constructor(a_prototype);
-    if (!object_key){
-        TFATAL("object_key__constructor() failed\n");
+    link_name = link_name__alloc();
+    if (!link_name){
+        TFATAL("link_name__alloc() failed\n");
     }
 
-    object__mem_set_copy_str((Object *)object_key, a_str);
+    link_name->mem = strdup(a_val);
 
-    return object_key;
+    return link_name;
 }
 
-ObjectKey * object_key__constructor_double(
-    const double    a_str,
-    Object          *a_prototype)
+LinkName * link_name__alloc_double(
+    const double a_val)
 {
-    ObjectKey   *object_key = NULL;
+    LinkName    *link_name  = NULL;
     char        buffer[512] = { 0x00 };
 
     snprintf(buffer, sizeof(buffer),
         "%g",
-        a_str
+        a_val
     );
 
-    object_key = object_key__constructor(a_prototype);
-    if (!object_key){
-        TFATAL("object_key__constructor() failed\n");
+    link_name = link_name__alloc();
+    if (!link_name){
+        TFATAL("link_name__alloc() failed\n");
     }
 
-    object__mem_set_copy_str((Object *)object_key, buffer);
+    link_name->mem = strdup(buffer);
 
-    return object_key;
+    return link_name;
 }
 
-void object_key__serialize_cb(
-    Object      *a_object,
-    Object      *a_out,
-    const char  *a_delimeter)
+int32_t link_name__set_name(
+    LinkName    *a_link_name,
+    const char  *a_data)
 {
-    if (!a_object){
-        TFATAL("missing argument: 'a_object'\n");
-    }
-    if (!a_out){
-        TFATAL("missing argument: 'a_out'\n");
+    int32_t err = -1;
+
+    if (!a_link_name){
+        TFATAL("missing argument: 'a_link_name'\n");
     }
-    if (!a_delimeter){
-        TFATAL("missing argument: 'a_delimeter'\n");
+
+    if (a_link_name->mem){
+        free(a_link_name->mem);
+        a_link_name->mem = NULL;
     }
 
-    object__mem_add_printf(
-        a_out,
-        "\"%s\"",
-        object__mem_c_str(a_object)
-    );
+    a_link_name->mem = strdup(a_data);
+
+    // all ok
+    err = 0;
+
+    return err;
 }
 
-const char * object_key__mem_c_str(
-    ObjectKey *a_object)
+const char * link_name__mem_c_str(
+    LinkName    *a_link_name)
 {
     const char *ret = NULL;
 
-    OBJECT_CHECK(a_object);
+    if (!a_link_name){
+        TFATAL("missing argument: 'a_link_name'\n");
+    }
 
-    ret = object__mem_c_str((Object *)a_object);
+    ret = a_link_name->mem;
 
     return ret;
 }
 
-// ---------------- object value ----------------
+// ---------------- link_info ----------------
 
-void object_value__destructor_cb(
-    Object *a_object)
+void link_info__free(
+    LinkInfo *a_link_info)
 {
-    ObjectValue *object = NULL;
-
-    if (!a_object){
-        TFATAL("missing argument: 'a_object'\n");
+    if (!a_link_info){
+        TFATAL("missing argument: 'a_link_info'\n");
     }
 
-    object = container_of(a_object, ObjectValue, super);
-
 #ifdef __x86_64__
-    PDEBUG(100, "object: (0x%lx)\n", (uint64_t)object);
+    PDEBUG(100, "object: (0x%lx)\n", (uint64_t)a_link_info);
 #else
-    PDEBUG(100, "object: (0x%x)\n", (uval_t)object);
+    PDEBUG(100, "object: (0x%x)\n", (uint32_t)a_link_info);
 #endif
 
-    if (object->object){
-        object__ref_dec(object->object);
-        object->object = NULL;
+    if (a_link_info->object_id){
+        free(a_link_info->object_id);
+        a_link_info->object_id = NULL;
     }
 
-    object__destructor_cb((Object *)object);
+    free(a_link_info);
 }
 
-ObjectValue * object_value__constructor()
+LinkInfo * link_info__constructor()
 {
-    ObjectValue  *object = NULL;
-    //Object      *obj    = NULL;
-    uint32_t    size    = sizeof(*object);
+    LinkInfo       *link_info  = NULL;
+    uint32_t    size    = sizeof(*link_info);
 
-    object = (ObjectValue *)object__constructor_uint32_t(
-        "object_value", // type
-        "",             // class name
-        size,
-        NULL            // prototype
-    );
-    if (!object){
+    link_info = (LinkInfo *)calloc(1, size);
+    if (!link_info){
         PERROR("cannot allocate memory,"
             " was needed: '%u' byte(s)\n",
             size
         );
         goto fail;
     }
-    //obj = (Object *)object;
-
-    object->super.destructor_cb = object_value__destructor_cb;
-    object->super.serialize_cb  = object_value__serialize_cb;
 
 #ifdef __x86_64__
-    PDEBUG(100, "object: (0x%lx)\n", (uint64_t)object);
+    PDEBUG(100, "link_info: (0x%lx)\n", (uint64_t)link_info);
 #else
-    PDEBUG(100, "object: (0x%x)\n", (uint32_t)object);
+    PDEBUG(100, "link_info: (0x%x)\n", (uint32_t)link_info);
 #endif
 
 out:
-    return object;
+    return link_info;
 fail:
-    if (object){
-        object__ref_dec((Object *)object);
-        object = NULL;
+    if (link_info){
+        link_info__free(link_info);
+        link_info = NULL;
     }
     goto out;
 }
 
-void object_value__serialize_cb(
-    Object      *a_object,
-    Object      *a_out,
-    const char  *a_delimeter)
+void    link_info__set_object_id(
+    LinkInfo    *a_link_info,
+    const char  *a_object_id)
 {
-    if (!a_object){
-        TFATAL("missing argument: 'a_object'\n");
+    if (!a_link_info){
+        TFATAL("missing argument: 'a_link_info'\n");
     }
-    if (!a_out){
-        TFATAL("missing argument: 'a_out'\n");
+
+    if (a_link_info->object_id){
+        free(a_link_info->object_id);
+        a_link_info->object_id = NULL;
     }
-    if (!a_delimeter){
-        TFATAL("missing argument: 'a_delimeter'\n");
+
+    a_link_info->object_id = strdup(a_object_id);
+}
+
+void    link_info__set_flags(
+    LinkInfo    *a_link_info,
+    LinkFlags   a_flags)
+{
+    if (!a_link_info){
+        TFATAL("missing argument: 'a_link_info'\n");
     }
 
-    object__mem_add_printf(
-        a_out,
-        "\"%s\"",
-        (char *)a_object->mem
+    a_link_info->flags = a_flags;
+}
+
+int32_t link_info__get(
+    GHashTable  *a_table,
+    LinkName    *a_name,
+    LinkInfo    **a_out)
+{
+    int32_t res, err = -1;
+
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
+    if (!a_name){
+        TFATAL("missing argument: 'a_name'\n");
+    }
+
+    *a_out = g_hash_table_lookup(a_table, a_name);
+
+    PWARN("search: '%s' at hash table 0x%lx"
+        " res: 0x%lx"
+        "\n",
+        link_name__mem_c_str(a_name),
+        (uint64_t)a_table,
+        (uint64_t)*a_out
+    );
+
+    if (!*a_out){
+        // not found or empty
+        res = g_hash_table_contains(a_table, a_name);
+        if (res){
+            PERROR("link_name exist, but link_info is NULL\n");
+            goto fail;
+        }
+    }
+
+    // all ok
+    err = 0;
+
+out:
+    return err;
+
+fail:
+    goto out;
+}
+
+int32_t link_info__get_str(
+    GHashTable  *a_table,
+    const char  *a_name,
+    LinkInfo    **a_out)
+{
+    int32_t     res, err    = -1;
+    LinkName    *name       = NULL;
+
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
+    if (!a_name){
+        TFATAL("missing argument: 'a_name'\n");
+    }
+
+    name = link_name__alloc_str(a_name);
+    if (!name){
+        TFATAL("link_name__alloc_str() failed\n");
+    }
+
+    res = link_info__get(
+        a_table,
+        name,
+        a_out
+    );
+    if (res){
+        err = res;
+        goto fail;
+    }
+
+    // all ok
+    err = 0;
+
+out:
+    if (name){
+        link_name__free(name);
+        name = NULL;
+    }
+
+    return err;
+
+fail:
+    if (0 <= err){
+        err = -1;
+    }
+    goto out;
+}
+
+void link_info__set(
+    GHashTable  *a_table,
+    LinkName    *a_name,
+    LinkInfo    *a_info)
+{
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
+    if (!a_name){
+        TFATAL("missing argument: 'a_name'\n");
+    }
+    if (!a_info){
+        TFATAL("missing argument: 'a_info'\n");
+    }
+
+    g_hash_table_insert(
+        a_table,
+        a_name,
+        a_info
+    );
+}
+
+int32_t link_info__get_create(
+    GHashTable  *a_table,
+    LinkName    *a_name,
+    LinkInfo    **a_out)
+{
+    int32_t res, err = -1;
+
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
+    if (!a_name){
+        TFATAL("missing argument: 'a_name'\n");
+    }
+
+    res = link_info__get(
+        a_table,
+        a_name,
+        a_out
+    );
+    if (!res){
+        // found
+        goto out;
+    }
+
+    *a_out = link_info__constructor();
+    if (!*a_out){
+        PERROR("link_info__constructor() failed\n");
+        goto fail;
+    }
+
+    link_info__set(
+        a_table,
+        a_name,
+        *a_out
+    );
+
+    // all ok
+    err = 0;
+
+out:
+    return err;
+
+fail:
+    goto out;
+}
+
+int32_t link_info__get_create_str(
+    GHashTable  *a_table,
+    const char  *a_name,
+    LinkInfo    **a_out)
+{
+    int32_t     res, err    = -1;
+    LinkName    *name       = NULL;
+
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
+    if (!a_name){
+        TFATAL("missing argument: 'a_name'\n");
+    }
+
+    name = link_name__alloc_str(a_name);
+    if (!name){
+        TFATAL("link_name__alloc_str() failed\n");
+    }
+
+    res = link_info__get_create(
+        a_table,
+        name,
+        a_out
     );
+    if (res){
+        err = res;
+        goto fail;
+    }
+
+    // all ok
+    err = 0;
+
+out:
+    if (name){
+        link_name__free(name);
+    }
+
+    return err;
+
+fail:
+    if (0 <= err){
+        err = -1;
+    }
+    goto out;
 }
 
 // ---------------- object ----------------
@@ -482,9 +678,21 @@ void object__destructor_cb(
     }
 
     // low level
-    if (a_object->this){
-        g_hash_table_destroy(a_object->this);
-        a_object->this = NULL;
+    if (a_object->parents){
+        g_hash_table_destroy(a_object->parents);
+        a_object->parents = NULL;
+    }
+    if (a_object->neighs_left){
+        g_hash_table_destroy(a_object->neighs_left);
+        a_object->neighs_left = NULL;
+    }
+    if (a_object->neighs_right){
+        g_hash_table_destroy(a_object->neighs_right);
+        a_object->neighs_right = NULL;
+    }
+    if (a_object->children){
+        g_hash_table_destroy(a_object->children);
+        a_object->children = NULL;
     }
 
     if (a_object->mem){
@@ -499,8 +707,7 @@ void object__destructor_cb(
 Object * object__constructor_uint32_t(
     const char      *a_type,
     const char      *a_class_name,
-    const uint32_t  a_size,
-    Object          *a_prototype)
+    const uint32_t  a_size)
 {
     Object      *object     = NULL;
     uint32_t    min_size    = sizeof(*object);
@@ -529,6 +736,13 @@ Object * object__constructor_uint32_t(
         goto fail;
     }
 
+    // init id
+    object->id = generate_id(10);
+    if (!object->id){
+        PERROR("generate_id() failed\n");
+        goto fail;
+    }
+
     // init mutex
     pthread_mutexattr_init(&object->mutex_attr);
     pthread_mutexattr_settype(
@@ -547,24 +761,43 @@ Object * object__constructor_uint32_t(
     object->serialize_cb    = object__serialize_cb;
     object->to_string_cb    = object__to_string_cb;
 
-    object->this = g_hash_table_new_full(
+    // links
+    object->parents = g_hash_table_new_full(
+        g_str_hash,
+        link_name__equal_func, //g_str_equal,
+        link_name__destroy_cb,
+        link_info__destroy_cb
+    );
+    object->neighs_left = g_hash_table_new_full(
+        g_str_hash,
+        link_name__equal_func, //g_str_equal,
+        link_name__destroy_cb,
+        link_info__destroy_cb
+    );
+    object->neighs_right = g_hash_table_new_full(
+        g_str_hash,
+        link_name__equal_func, //g_str_equal,
+        link_name__destroy_cb,
+        link_info__destroy_cb
+    );
+    object->children = g_hash_table_new_full(
         g_str_hash,
-        object__key_equal_func, //g_str_equal,
-        object__key_destroy_cb,
-        object__value_destroy_cb
+        link_name__equal_func, //g_str_equal,
+        link_name__destroy_cb,
+        link_info__destroy_cb
     );
 
-    if (a_prototype){
-        object__ref_inc(a_prototype);
-        object__prop_set_str_obj(
+    /*
+        object__link_parent(
             object,
-            "prototype",
-            a_prototype
+            a_parent_id,
+            LINK_FLAG_TO & LINK_FLAG_FROM
         );
-    }
+    */
 
+/*
     if (    strcmp(a_type, "object_key")
-        &&  strcmp(a_type, "object_value")
+        &&  strcmp(a_type, "link_info")
         &&  strcmp(a_type, "code_define")
         &&  strcmp(a_type, "code_call"))
     {
@@ -575,6 +808,29 @@ Object * object__constructor_uint32_t(
             "dispatchEvent",    object__api_dispatchEvent
         );
     }
+*/
+
+    PWARN("object->type:        '%s'\n"
+        " object->class_name:   '%s'\n"
+        " a_type:               '%s'\n"
+        " a_class_name:         '%s'\n"
+        "\n",
+        object->type,
+        object->class_name,
+        a_type,
+        a_class_name
+    );
+    if (    !strcmp(object->type,       "object")
+        &&  !strcmp(object->class_name, "Window"))
+    {
+        object__init_window(object);
+    }
+
+    //window = object__get_window_context(object);
+    //if (!window){
+    //    TFATAL("cannot get window\n");
+    //}
+
 
 #ifdef __x86_64__
     PDEBUG(100, "object: (0x%lx)\n", (uint64_t)object);
@@ -600,51 +856,56 @@ Object * object__constructor_window()
     object = object__constructor_uint32_t(
         "object",   // type
         "Window",   // class_name
-        size,
-        NULL        // prototype
+        size
     );
 
+    return object;
+}
+
+void object__init_window(
+    Object *a_object)
+{
     object__var_set(
-        object,
+        a_object,
         NULL,   // position
         "statements",
-        object__constructor(object)
+        object__constructor(a_object->id)
     );
     object__var_set(
-        object,
+        a_object,
         NULL,   // position
         "operators",
-        object__constructor(object)
+        object__constructor(a_object->id)
     );
 
     // init code queue
-    object->code_queue = (struct obect_array *)
-        object_array__constructor(object);
-    if (!object->code_queue){
+    a_object->code_queue = (struct object_array *)
+        object_array__constructor(a_object->id);
+    if (!a_object->code_queue){
         PERROR("object_array__constructor() failed\n");
         goto fail;
     }
 
     // init event base
-    object->event_base = event_base_new();
-    if (!object->event_base){
+    a_object->event_base = event_base_new();
+    if (!a_object->event_base){
         PERROR("event_base_new() failed\n");
         goto fail;
     }
 
     // event dns
-    object->dns_base = evdns_base_new(
-        object->event_base,
+    a_object->dns_base = evdns_base_new(
+        a_object->event_base,
         1   // initialize_nameservers
     );
-    if (!object->dns_base){
-        PERROR("object->dns_base failed\n");
+    if (!a_object->dns_base){
+        PERROR("a_object->dns_base failed\n");
         goto fail;
     }
 
     // prepare stack's vars
-    //object_object__stack_create(object);
-    //vars = object_object__stack_vars_get(object);
+    //object_object__stack_create(a_object);
+    //vars = object_object__stack_vars_get(a_object);
 
     // FYI:
     // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
@@ -654,123 +915,123 @@ Object * object__constructor_window()
 
     // populate statements
     object__statement_define(
-        object, "new",      object__statement_new
+        a_object, "new",      object__statement_new
     );
     object__statement_define(
-        object, "var",      object__statement_var
+        a_object, "var",      object__statement_var
     );
     object__statement_define(
-        object, "if",       object__statement_if
+        a_object, "if",       object__statement_if
     );
     object__statement_define(
-        object, "for",      object__statement_for
+        a_object, "for",      object__statement_for
     );
     object__statement_define(
-        object, "function", object__statement_function
+        a_object, "function", object__statement_function
     );
     object__statement_define(
-        object, "=",        object__statement_assign
+        a_object, "=",        object__statement_assign
     );
     object__statement_define(
-        object, "{",        object__statement_brace
+        a_object, "{",        object__statement_brace
     );
 
     // populate operators, order is important
     // first operators will have the lowest priority
     // 0
     object__operator_define(
-        object, "return", object__operator_return
+        a_object, "return", object__operator_return
     );
     object__operator_define(
-        object, ",",    object__operator_comma
+        a_object, ",",    object__operator_comma
     );
     // 3
     object__operator_define(
-        object, "=",    object__operator_assign
+        a_object, "=",    object__operator_assign
     );
     object__operator_define(
-        object, "+=",   object__operator_addition_assign
+        a_object, "+=",   object__operator_addition_assign
     );
     object__operator_define(
-        object, "-=",   object__operator_subtraction_assign
+        a_object, "-=",   object__operator_subtraction_assign
     );
     object__operator_define(
-        object, ":",    object__operator_colon
+        a_object, ":",    object__operator_colon
     );
     // 5
     object__operator_define(
-        object, "||",   object__operator_logical_or
+        a_object, "||",   object__operator_logical_or
     );
     // 6
     object__operator_define(
-        object, "&&",   object__operator_logical_and
+        a_object, "&&",   object__operator_logical_and
     );
     // 10
     object__operator_define(
-        object, "!=",   object__operator_compare_not_equal
+        a_object, "!=",   object__operator_compare_not_equal
     );
     object__operator_define(
-        object, "==",   object__operator_compare_equal
+        a_object, "==",   object__operator_compare_equal
     );
     // 11
     object__operator_define(
-        object, "<=",   object__operator_greater_eq_than
+        a_object, "<=",   object__operator_greater_eq_than
     );
     object__operator_define(
-        object, ">=",   object__operator_less_eq_than
+        a_object, ">=",   object__operator_less_eq_than
     );
     object__operator_define(
-        object, "<",    object__operator_greater_than
+        a_object, "<",    object__operator_greater_than
     );
     object__operator_define(
-        object, ">",    object__operator_less_than
+        a_object, ">",    object__operator_less_than
     );
     // 13
     object__operator_define(
-        object, "-",    object__operator_subtraction
+        a_object, "-",    object__operator_subtraction
     );
     object__operator_define(
-        object, "+",    object__operator_addition
+        a_object, "+",    object__operator_addition
     );
     // 14
     object__operator_define(
-        object, "/",    object__operator_division
+        a_object, "/",    object__operator_division
     );
     object__operator_define(
-        object, "*",    object__operator_multiplication
+        a_object, "*",    object__operator_multiplication
     );
     // 16
     object__operator_define(
-        object, "--",   object__operator_dec
+        a_object, "--",   object__operator_dec
     );
     object__operator_define(
-        object, "++",   object__operator_inc
+        a_object, "++",   object__operator_inc
     );
     // 19
     object__operator_define(
-        object, "(",    object__operator_bracket
+        a_object, "(",    object__operator_bracket
     );
     // 20 (max priority)
     object__operator_define(
-        object, ";",    object__operator_semicolon
+        a_object, ";",    object__operator_semicolon
     );
 
     // populate global methods
-    object__code_define(object,
+    object__code_define(a_object,
         "alert",        object__api_alert
     );
-    object__code_define(object,
+    object__code_define(a_object,
         "setTimeout",   object__api_setTimeout
     );
-    object__code_define(object,
+    object__code_define(a_object,
         "Action",       object__api_Action
     );
 
     // populate object's methods
-    object__code_define(object,
+    object__code_define(a_object,
         "listen",       object__api_listen
     );
-    object__code_define(object,
+    object__code_define(a_object,
         "exit",         object__api_exit
     );
 
@@ -778,150 +1039,84 @@ Object * object__constructor_window()
     //{
     //    ObjectIPNoise *ipnoise = NULL;
     //    ipnoise = object_ipnoise__constructor();
-    //    object__prop_set_str_obj(
-    //        object,
+    //    object__children_prop_set_obj(
+    //        a_object,
     //        "ipnoise",
-    //        (Object *)ipnoise
+    //        (Object *)ipnoise,
+    //        LINK_FLAG_FROM | LINK_FLAG_TO
     //    );
     //}
 
 out:
-    return object;
+    return;
 
 fail:
     goto out;
 }
 
-Object * object__constructor(
-    Object *a_prototype)
+// ---------------- g_hash_table ----------------
+
+gboolean link_name__equal_func(
+    gconstpointer   a_link_name1,
+    gconstpointer   a_link_name2)
 {
-    Object      *ret = NULL;
-    uint32_t    size = sizeof(*ret);
+    LinkName    *link_name1 = (LinkName *)a_link_name1;
+    LinkName    *link_name2 = (LinkName *)a_link_name2;
+    gboolean    ret         = FALSE;
 
-    ret = object__constructor_uint32_t(
-        "object",   // type
-        "Object",   // class_name
-        size,
-        a_prototype
-    );
-
-    return ret;
-}
-
-// ---------------- g_hash_table ----------------
-
-gboolean object__key_equal_func(
-    gconstpointer   a_object1,
-    gconstpointer   a_object2)
-{
-    Object      *object1 = (Object *)a_object1;
-    Object      *object2 = (Object *)a_object2;
-    gboolean    ret      = FALSE;
-
-    object__lock(object1);
-    object__lock(object2);
-
-    if (    object1->mem_size
-        &&  object1->mem_size == object2->mem_size
-        &&  !memcmp(
-                object1->mem,
-                object2->mem,
-                object1->mem_size
-            )
-        )
-    {
+    if (!strcmp(link_name1->mem, link_name2->mem)){
         ret = TRUE;
     }
 
-#ifdef __x86_64__
-    PDEBUG(100,
-    //PWARN(
-        "(0x%lx"
-        " '%s'"
-        " size: '%lu')"
-        "  %s "
-        " (0x%lx"
-        " '%s'"
-        " size: '%lu')"
-        "\n",
-        (uint64_t)object1,
-        (const char *)object1->mem,
-        object1->mem_size,
-        ret ? "==" : "!=",
-        (uint64_t)object2,
-        (const char *)object2->mem,
-        object2->mem_size
-    );
-#else
-    PDEBUG(100,
-        "(0x%lx"
-        " '%s'"
-        " size: '%llu')"
-        "  %s "
-        " (0x%x"
-        " '%s'"
-        " size: '%llu')"
-        "\n",
-        (uint32_t)object1,
-        (const char *)object1->mem,
-        object1->mem_size,
-        ret ? "==" : "!=",
-        (uint32_t)object2,
-        (const char *)object2->mem,
-        object2->mem_size
-    );
-#endif
-
-    object__unlock(object2);
-    object__unlock(object1);
-
-#ifdef __x86_64__
-    PDEBUG(100, "compare object: 0x%lx with 0x%lx,"
-        " ret: '%d'\n",
-        (uint64_t)object1,
-        (uint64_t)object2,
-        ret
-    );
-#else
-    PDEBUG(100, "compare object: 0x%x with 0x%x\n,"
-        " ret: '%d'\n",
-        (uint32_t)object1,
-        (uint32_t)object2,
-        ret
+    PWARN("'%s' %s '%s'\n",
+        link_name1->mem,
+        link_name2->mem,
+        ret ? "==" : "!="
     );
-#endif
 
     return ret;
 }
 
-void object__key_destroy_cb(
+void link_name__destroy_cb(
     gpointer a_data)
 {
-    Object *object = (Object *)a_data;
-
-#ifdef __x86_64__
-    PDEBUG(100, "object: (0x%lx)\n", (uint64_t)object);
-#else
-    PDEBUG(100, "object: (0x%x)\n", (uint32_t)object);
-#endif
-
-    object__ref_dec(object);
+    LinkName *key = (LinkName *)a_data;
+    link_name__free(key);
 }
 
-void object__value_destroy_cb(
+void link_info__destroy_cb(
     gpointer a_data)
 {
-    Object *object = (Object *)a_data;
+    LinkInfo *link_info = (LinkInfo *)a_data;
+    link_info__free(link_info);
+}
 
-#ifdef __x86_64__
-    PDEBUG(100, "object: (0x%lx)\n", (uint64_t)object);
-#else
-    PDEBUG(100, "object: (0x%x)\n", (uint32_t)object);
-#endif
+// ---------------- factory ----------------
 
-    if (object){
-        object__ref_dec(object);
+Object * object__create(
+    const char  *a_type,
+    const char  *a_class)
+{
+    Object  *ret = NULL;
+
+    if (    !strcmp(a_type,  "number")
+        &&  !strcmp(a_class, ""))
+    {
+        ret = (Object *)object_number__constructor();
+    } else {
+        //ret = object__constructor_uint32_t(
+        //    a_type,
+        //    a_class,
+        //    size
+        //);
+        TFATAL("unsupported case,"
+            " a_type: '%s', a_class: '%s'\n",
+            a_type,
+            a_class
+        );
     }
+
+    return ret;
 }
 
 // ---------------- synchronize ----------------
@@ -976,7 +1171,8 @@ void object__ref_dec(
         );
     }
 
-    if (!a_object->ref_count){
+    // XXX FIXME TODO temporary disable mem free
+    if (0 && !a_object->ref_count){
 #ifdef __x86_64__
         PDEBUG(100, "object: (0x%lx), refcount: '%u'\n",
             (uint64_t)a_object,
@@ -1015,9 +1211,9 @@ void object__code_define(
         ObjectArray     *a_args
     ))
 {
-    ObjectKey           *key            = NULL;
-    ObjectValue         *val            = NULL;
-    ObjectCodeDefine    *code_define    = NULL;
+//    LinkName            *link_name   = NULL;
+//    LinkInfo            *link_info   = NULL;
+    ObjectCodeDefine    *code_define = NULL;
 
     OBJECT_CHECK(a_object);
     if (!a_name){
@@ -1027,17 +1223,9 @@ void object__code_define(
         TFATAL("empty argument: 'a_name'\n");
     }
 
-    // key
-    key = object_key__constructor(a_object);
-    if (!key){
-        PERROR("object_key_constructor() failed\n");
-        goto fail;
-    }
-
-    object__mem_set_copy_str((Object *)key, a_name);
+    object__lock(a_object);
 
-    // code_define
-    code_define = object_code_define__constructor(a_object);
+    code_define = object_code_define__constructor();
     if (!code_define){
         PERROR("object_code_define_constructor() failed\n");
         goto fail;
@@ -1046,36 +1234,141 @@ void object__code_define(
     object__mem_set_copy_str((Object *)code_define, a_name);
     code_define->func = a_func;
 
-    // val
-    val = object_value__constructor(a_object);
-    if (!val){
-        PERROR("object_value_constructor() failed\n");
+    {
+        LinkFlags   flags = LINK_FLAG_TO | LINK_FLAG_FROM;
+
+        object__child_link(
+            a_object,
+            a_name,
+            code_define->super.id,
+            flags
+        );
+    }
+
+out:
+    object__unlock(a_object);
+
+    return;
+
+fail:
+    goto out;
+}
+
+void object__child_link_info_get(
+    Object      *a_object,
+    const char  *a_name,
+    LinkInfo    **a_out)
+{
+    link_info__get_str(
+        a_object->children,
+        a_name,
+        a_out
+    );
+}
+
+int32_t object__child_link(
+    Object      *a_object,
+    const char  *a_name,
+    const char  *a_object_id,
+    LinkFlags   a_flags)
+{
+    LinkName    *name       = NULL;
+    LinkInfo    *link_info  = NULL;
+    int32_t     res, err    = -1;
+
+    OBJECT_CHECK(a_object);
+
+    object__lock(a_object);
+
+    // name
+    name = link_name__alloc();
+    if (!name){
+        PERROR("link_name__alloc() failed\n");
         goto fail;
     }
-    object__ref_inc((Object *)code_define);
-    val->object = (Object *)code_define;
 
-    // insert
-    object__ref_inc((Object *)key);
-    object__ref_inc((Object *)val);
-    object__prop_set_obj_obj(
-        a_object,
-        key,
-        val
+    link_name__set_name(name, a_name);
+
+    // link_info
+    res = link_info__get_create(
+        a_object->children,
+        name,
+        &link_info
     );
+    if (!res){
+        PERROR("link_info__get_create() failed\n");
+        goto fail;
+    }
+
+    link_info__set_object_id(link_info, a_object_id);
+    link_info__set_flags(link_info,     a_flags);
+
+    // all ok
+    err = 0;
 
 out:
-    if (key){
-        object__ref_dec((Object *)key);
+    if (name){
+        link_name__free(name);
     }
-    if (val){
-        object__ref_dec((Object *)val);
+    object__unlock(a_object);
+
+    return err;
+
+fail:
+    if (0 <= err){
+        err = -1;
     }
-    if (code_define){
-        object__ref_dec((Object *)code_define);
+    goto out;
+}
+
+int32_t object__link_parent(
+    Object      *a_object,
+    const char  *a_name,
+    const char  *a_object_id,
+    LinkFlags   a_flags)
+{
+    LinkInfo    *link_info  = NULL;
+    int32_t     res, err    = -1;
+
+    OBJECT_CHECK(a_object);
+    if (    !a_name
+        ||  !strlen(a_name))
+    {
+        TFATAL("missing argument: 'a_name'\n");
     }
-    return;
+    if (    !a_object_id
+        ||  !strlen(a_object_id))
+    {
+        TFATAL("missing argument: 'a_object_id'\n");
+    }
+
+    object__lock(a_object);
+
+    res = link_info__get_create_str(
+        a_object->parents,
+        a_name,
+        &link_info
+    );
+    if (res){
+        err = res;
+        goto fail;
+    }
+
+    link_info__set_object_id(link_info, a_object_id);
+    link_info__set_flags(link_info,     a_flags);
+
+    // all ok
+    err = 0;
+
+out:
+    object__unlock(a_object);
+
+    return err;
+
 fail:
+    if (0 <= err){
+        err = -1;
+    }
     goto out;
 }
 
@@ -1085,16 +1378,17 @@ fail:
 // return: 0 - if prop was placed to a_out
 //
 int32_t object__prop_ptr_get_obj_obj(
-    Object          *a_object,
-    ObjectKey       *a_key,
-    ObjectValue     **a_out)
+    Object      *a_object,
+    LinkName    *a_link_name,
+    LinkInfo    **a_out)
 {
-    ObjectValue *value      = NULL;
-    Object      *val        = NULL;
+    LinkInfo    *link_info  = NULL;
     int32_t     res, err    = -1;
 
     OBJECT_CHECK(a_object);
-    OBJECT_CHECK(a_key);
+    if (!a_link_name){
+        TFATAL("missing argument: 'a_key'\n");
+    }
     if (!a_out){
         TFATAL("missing argument: 'a_out'\n");
     }
@@ -1102,22 +1396,33 @@ int32_t object__prop_ptr_get_obj_obj(
     // search
     object__lock(a_object);
 
-    val = g_hash_table_lookup(
-        a_object->this,
-        a_key
+    object__child_link_info_get(
+        a_object,
+        link_name__mem_c_str(a_link_name),
+        &link_info
     );
-    if (!val){
+
+    PWARN("search: '%s' at object 0x%lx"
+        " (hash table: 0x%lx),"
+        " res: 0x%lx"
+        "\n",
+        link_name__mem_c_str(a_link_name),
+        (uint64_t)a_object,
+        (uint64_t)a_object->children,
+        (uint64_t)link_info
+    );
+    if (!link_info){
         // not found or empty
         res = g_hash_table_contains(
-            a_object->this,
-            a_key
+            a_object->children,
+            link_name__mem_c_str(a_link_name)
         );
         if (res){
             // empty
-            object__unlock(a_object);
-            TFATAL("object's key exist,"
-                " but object's value is NULL\n"
+            PERROR("object's key exist,"
+                " but object's link_info is NULL\n"
             );
+            goto fail;
         }
 
         // not found
@@ -1125,28 +1430,7 @@ int32_t object__prop_ptr_get_obj_obj(
         goto out;
     }
 
-    value = dynamic_pointer_cast(
-        ObjectValue,
-        val,
-        "object_value",
-        ""
-    );
-    if (!value){
-        object__unlock(a_object);
-        TFATAL("object's key exist,"
-            " but object's value type"
-            " is not 'object_value' (%s)"
-            "\n",
-            val ? val->type : "undefined"
-        );
-    }
-
-    // MORIK
-    //if (value->object){
-    //    object__ref_inc(value->object);
-    //}
-    object__ref_inc((Object *)value);
-    *a_out = value;
+    *a_out = link_info;
 
     // mark as exist
     err = 0;
@@ -1155,6 +1439,9 @@ out:
     object__unlock(a_object);
 
     return err;
+
+fail:
+    goto out;
 }
 
 //
@@ -1162,14 +1449,16 @@ out:
 //
 int32_t object__prop_get_obj_obj(
     Object      *a_object,
-    ObjectKey   *a_key,
+    LinkName    *a_link_name,
     Object      **a_out)
 {
-    ObjectValue *value  = NULL;
+    LinkInfo    *link_info  = NULL;
     int32_t     err     = -1;
 
     OBJECT_CHECK(a_object);
-    OBJECT_CHECK(a_key);
+    if (!a_link_name){
+        TFATAL("missing argument: 'a_link_name'\n");
+    }
     if (!a_out){
         TFATAL("missing argument: 'a_out'\n");
     }
@@ -1179,16 +1468,15 @@ int32_t object__prop_get_obj_obj(
 
     object__prop_ptr_get_obj_obj(
         a_object,
-        a_key,
-        &value
+        a_link_name,
+        &link_info
     );
 
-    if (value){
-        if (value->object){
-            object__ref_inc(value->object);
-        }
-        *a_out = value->object;
-        object__ref_dec((Object *)value);
+    if (link_info){
+        object__get_by_id(
+            link_info->object_id,
+            a_out
+        );
         // mark as exist
         err = 0;
     } else {
@@ -1200,7 +1488,6 @@ int32_t object__prop_get_obj_obj(
     return err;
 }
 
-//
 // return: 0 - if prop was placed to a_out
 //
 int32_t object__prop_get_str_obj(
@@ -1208,8 +1495,8 @@ int32_t object__prop_get_str_obj(
     const char  *a_name,
     Object      **a_out)
 {
-    ObjectKey   *key    = NULL;
-    int32_t     err     = -1;
+    LinkName    *link_name  = NULL;
+    int32_t     err         = -1;
 
     OBJECT_CHECK(a_object);
     if (!a_name){
@@ -1223,22 +1510,70 @@ int32_t object__prop_get_str_obj(
     }
 
     // create temporary key
-    key = object_key__constructor_str(a_name, a_object);
-    if (!key){
-        TFATAL("object_key_constructor_str() failed\n");
+    link_name = link_name__alloc_str(a_name);
+    if (!link_name){
+        TFATAL("link_name__alloc_str() failed\n");
     }
 
     // search
     err = object__prop_get_obj_obj(
         a_object,
-        key,
+        link_name,
         a_out
     );
 
     // free key
-    object__ref_dec((Object *)key);
+    link_name__free(link_name);
+
+    return err;
+}
+
+//
+// return: 0 - if prop was placed to a_out
+//
+int32_t object__prop_get_create_str_obj(
+    Object      *a_object,
+    const char  *a_name,
+    Object      **a_out)
+{
+    int32_t res, err = -1;
+
+    res = object__prop_get_str_obj(
+        a_object,
+        a_name,
+        a_out
+    );
+    if (res){
+        Object *val = NULL;
+        val = object__constructor(a_object->id);
+        if (!val){
+            object__add_error(
+                a_object,
+                a_object,   // position
+                "object__constructor() failed\n"
+            );
+            goto fail;
+        }
+        object__children_prop_set_obj(
+            a_object,
+            a_name,
+            val,
+            LINK_FLAG_FROM | LINK_FLAG_TO
+        );
+        object__ref_inc(val);
+        *a_out = val;
+    }
+
+    // all ok
+    err = 0;
 
+out:
     return err;
+fail:
+    if (0 < err){
+        err = -1;
+    }
+    goto out;
 }
 
 //
@@ -1247,9 +1582,9 @@ int32_t object__prop_get_str_obj(
 int32_t object__prop_ptr_get_str_obj(
     Object      *a_object,
     const char  *a_name,
-    ObjectValue **a_out)
+    LinkInfo **a_out)
 {
-    ObjectKey   *key    = NULL;
+    LinkName   *key    = NULL;
     int32_t     err     = -1;
 
     OBJECT_CHECK(a_object);
@@ -1264,9 +1599,9 @@ int32_t object__prop_ptr_get_str_obj(
     }
 
     // create temporary key
-    key = object_key__constructor_str(a_name, a_object);
+    key = link_name__alloc_str(a_name);
     if (!key){
-        TFATAL("object_key_constructor_str() failed\n");
+        TFATAL("link_name__alloc_str() failed\n");
     }
 
     // search
@@ -1290,15 +1625,15 @@ int32_t object__prop_get_double_obj(
     const double    a_name,
     Object          **a_out)
 {
-    ObjectKey   *key    = NULL;
+    LinkName   *key    = NULL;
     int32_t     err     = -1;
 
     OBJECT_CHECK(a_object);
 
     // create temporary key
-    key = object_key__constructor_double(a_name, a_object);
+    key = link_name__alloc_double(a_name);
     if (!key){
-        TFATAL("object_key_constructor_double() failed\n");
+        TFATAL("link_name__alloc_double() failed\n");
     }
 
     // search
@@ -1355,7 +1690,7 @@ int32_t object__prop_get_str_number(
 
     *a_out = prop;
 
-    // all ok, value was found
+    // all ok, link_info was found
     err = 0;
 
 out:
@@ -1392,7 +1727,7 @@ int32_t object__prop_get_str_double(
 
     *a_out = *((double *)val->super.mem);
 
-    // all ok, value was found
+    // all ok, link_info was found
     err = 0;
 
 out:
@@ -1448,7 +1783,7 @@ int32_t object__prop_get_str_str(
 
     *a_out = prop;
 
-    // all ok, value was found
+    // all ok, link_info was found
     err = 0;
 
 out:
@@ -1501,7 +1836,7 @@ int32_t object__prop_get_str_array(
 
     *a_out = prop;
 
-    // all ok, value was found
+    // all ok, link_info was found
     err = 0;
 
 out:
@@ -1518,7 +1853,7 @@ fail:
 //
 int32_t object__prop_get_obj_array(
     Object          *a_object,
-    ObjectKey       *a_name,
+    LinkName       *a_name,
     ObjectArray     **a_out)
 {
     Object          *val        = NULL;
@@ -1547,7 +1882,7 @@ int32_t object__prop_get_obj_array(
     if (!prop){
         PWARN("prop: '%s' was found,"
             " but prop's type is not array (%s)\n",
-            object_key__mem_c_str(a_name),
+            link_name__mem_c_str(a_name),
             val->type
         );
         goto out;
@@ -1555,7 +1890,7 @@ int32_t object__prop_get_obj_array(
 
     *a_out = prop;
 
-    // all ok, value was found
+    // all ok, link_info was found
     err = 0;
 
 out:
@@ -1567,230 +1902,196 @@ fail:
     goto out;
 }
 
-// ---------------- prop set val ----------------
+// ---------------- prop set ----------------
 
-void object__prop_set_obj_obj(
-    Object      *a_object,
-    ObjectKey   *a_name,
-    ObjectValue *a_val)
+void object__prop_set_link_info(
+    GHashTable  *a_table,
+    LinkName    *a_link_name,
+    LinkInfo    *a_link_info)
 {
-    OBJECT_CHECK(a_object);
-    OBJECT_CHECK(a_name);
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
+    if (!a_link_name){
+        TFATAL("missing argument: 'a_link_name'\n");
+    }
+    if (!a_link_info){
+        TFATAL("missing argument: 'a_link_info'\n");
+    }
 
     // insert
+    link_info__set(
+        a_table,
+        a_link_name,
+        a_link_info
+    );
+}
+
+void object__parents_prop_set_info(
+    Object      *a_object,
+    LinkName    *a_link_name,
+    LinkInfo    *a_link_info)
+{
     object__lock(a_object);
-    g_hash_table_insert(
-        a_object->this,
-        a_name,
-        a_val
+    object__prop_set_link_info(
+        a_object->parents,
+        a_link_name,
+        a_link_info
     );
     object__unlock(a_object);
 }
 
-void object__prop_set_str_double(
-    Object          *a_object,
-    const char      *a_name,
-    const double    a_val)
+// ---------------- neighs left ----------------
+
+void object__neighs__left_prop_set_info(
+    Object      *a_object,
+    LinkName    *a_link_name,
+    LinkInfo    *a_link_info)
 {
-    ObjectKey       *key    = NULL;
-    ObjectValue     *value  = NULL;
-    ObjectNumber    *val    = NULL;
-    Object          *window = NULL;
-    uint64_t        size    = 0;
-    int32_t         res     = 0;
+    object__lock(a_object);
+    object__prop_set_link_info(
+        a_object->neighs_left,
+        a_link_name,
+        a_link_info
+    );
+    object__unlock(a_object);
+}
 
-    OBJECT_CHECK(a_object);
-    if (!a_name){
-        TFATAL("missing argument: 'a_name'\n");
-    }
+// ---------------- neighs right ----------------
 
-    window = object__get_window_context(a_object);
-    OBJECT_CHECK(window);
+void object__neighs__right_prop_set_info(
+    Object      *a_object,
+    LinkName    *a_link_name,
+    LinkInfo    *a_link_info)
+{
+    object__lock(a_object);
+    object__prop_set_link_info(
+        a_object->neighs_right,
+        a_link_name,
+        a_link_info
+    );
+    object__unlock(a_object);
+}
 
-    // key
-    key = object_key__constructor(a_object);
-    if (!key){
-        PERROR("object_key_constructor() failed\n");
-        goto fail;
-    }
+// ---------------- prop ----------------
 
-    object__mem_set_copy_str((Object *)key, a_name);
+void object__prop_set(
+    GHashTable      *a_table,
+    const char      *a_name,
+    const char      *a_object_id,
+    LinkFlags       a_flags)
+{
+    LinkName    *link_name = NULL;
+    LinkInfo    *link_info = NULL;
 
-    // val
-    val = object_number__constructor(a_object);
-    if (!val){
-        PERROR("object_number__constructor() failed\n");
-        goto fail;
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
+    if (!a_name){
+        TFATAL("missing argument: 'a_name'\n");
+    }
+    if (!a_object_id){
+        TFATAL("missing argument: 'a_object_id'\n");
     }
 
-    size = sizeof(a_val);
-    res  = object__mem_malloc(window, (Object *)val, size);
-    if (res){
-#ifdef __x86_64__
-        PERROR("cannot allocate memory,"
-            " was needed: '%lu' byte(s)\n",
-            size
-        );
-#else
-        PERROR("cannot allocate memory,"
-            " was needed: '%u' byte(s)\n",
-            size
-        );
-#endif
-        goto fail;
+    link_name = link_name__alloc_str(a_name);
+    if (!link_name){
+        TFATAL("link_name__alloc_str() failed\n");
     }
-    memcpy(val->super.mem, &a_val, val->super.mem_size);
 
-    // value
-    value = object_value__constructor(a_object);
-    if (!value){
-        PERROR("object_value_constructor() failed\n");
-        goto fail;
+    link_info = link_info__constructor();
+    if (!link_info){
+        TFATAL("link_info__constructor() failed\n");
     }
-    object__ref_inc((Object *)val);
-    value->object = (Object *)val;
 
-    // insert
-    object__ref_inc((Object *)key);
-    object__ref_inc((Object *)value);
-    object__prop_set_obj_obj(
-        a_object,
-        key,
-        value
-    );
+    link_info__set_object_id(link_info, a_object_id);
+    link_info__set_flags(link_info,     a_flags);
 
-out:
-    if (window){
-        object__ref_dec(window);
-    }
-    if (key){
-        object__ref_dec((Object *)key);
-    }
-    if (val){
-        object__ref_dec((Object *)val);
-    }
-    if (value){
-        object__ref_dec((Object *)value);
-    }
-    return;
-fail:
-    goto out;
+    object__prop_set_link_info(
+        a_table,
+        link_name,
+        link_info
+    );
 }
 
-void object__prop_set_obj_str(
-    Object      *a_object,
-    ObjectKey   *a_key,
-    const char  *a_val)
+void object__prop_set_double(
+    GHashTable      *a_table,
+    const char      *a_name,
+    const double    a_val,
+    LinkFlags       a_flags)
 {
-    ObjectValue     *value  = NULL;
-    ObjectString    *val    = NULL;
+    ObjectNumber    *var = NULL;
 
-    OBJECT_CHECK(a_object);
-    OBJECT_CHECK(a_key);
-    if (!a_val){
-        TFATAL("missing argument: 'a_val'\n");
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
     }
-
-    // val
-    val = object_string__constructor(a_object);
-    if (!val){
-        PERROR("object_string__constructor() failed\n");
-        goto fail;
+    if (!a_name){
+        TFATAL("missing argument: 'a_name'\n");
     }
 
-    object__mem_set_copy_str((Object *)val, a_val);
-
-    // value
-    value = object_value__constructor(a_object);
-    if (!value){
-        PERROR("object_value__constructor() failed\n");
+    // create variable
+    var = (ObjectNumber *)object__create("number", "");
+    if (!var){
+        PERROR("object__create() failed\n");
         goto fail;
     }
 
-    object__ref_inc((Object *)val);
-    value->object = (Object *)val;
+    // set val
+    object_number__mem_set(var, a_val);
 
-    // insert
-    object__ref_inc((Object *)value);
-    object__prop_set_obj_obj(
-        a_object,
-        a_key,
-        value
+    // set prop
+    object__prop_set(
+        a_table,
+        a_name,
+        var->super.id,
+        a_flags
     );
 
 out:
-    if (val){
-        object__ref_dec((Object *)val);
-    }
-    if (value){
-        object__ref_dec((Object *)value);
+    if (var){
+        object__ref_dec((Object *)var);
     }
-
     return;
 fail:
     goto out;
 }
 
-void object__prop_set_str_str(
-    Object      *a_object,
-    const char  *a_name,
-    const char  *a_val)
+void object__prop_set_str(
+    GHashTable      *a_table,
+    const char      *a_name,
+    const char      *a_val,
+    LinkFlags       a_flags)
 {
-    ObjectKey       *key    = NULL;
-    ObjectString    *val    = NULL;
-    ObjectValue     *value  = NULL;
+    ObjectString    *var = NULL;
 
-    OBJECT_CHECK(a_object);
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
     if (!a_name){
         TFATAL("missing argument: 'a_name'\n");
     }
 
-    // key
-    key = object_key__constructor(a_object);
-    if (!key){
-        PERROR("object_key__constructor() failed\n");
-        goto fail;
-    }
-
-    object__mem_set_copy_str((Object *)key, a_name);
-
-    // val
-    val = object_string__constructor(a_object);
-    if (!val){
-        PERROR("object_string__constructor() failed\n");
-        goto fail;
-    }
-
-    object__mem_set_copy_str((Object *)val, a_val);
-
-    // value
-    value = object_value__constructor(a_object);
-    if (!value){
-        PERROR("object_value__constructor() failed\n");
+    // create variable
+    var = (ObjectString *)object__create("string", "");
+    if (!var){
+        PERROR("object__create() failed\n");
         goto fail;
     }
 
-    object__ref_inc((Object *)val);
-    value->object = (Object *)val;
+    // set val
+    object_string__mem_set(var, a_val);
 
-    // insert
-    object__ref_inc((Object *)key);
-    object__ref_inc((Object *)value);
-    object__prop_set_obj_obj(
-        a_object,
-        key,
-        value
+    // set prop
+    object__prop_set(
+        a_table,
+        a_name,
+        var->super.id,
+        a_flags
     );
 
 out:
-    if (key){
-        object__ref_dec((Object *)key);
-    }
-    if (val){
-        object__ref_dec((Object *)val);
-    }
-    if (value){
-        object__ref_dec((Object *)value);
+    if (var){
+        object__ref_dec((Object *)var);
     }
     return;
 fail:
@@ -1798,127 +2099,155 @@ fail:
 }
 
 void object__prop_set_double_obj(
-    Object          *a_object,
+    GHashTable      *a_table,
     const double    a_name,
-    Object          *a_val)
+    Object          *a_val,
+    LinkFlags       a_flags)
 {
-    ObjectKey   *key    = NULL;
-    ObjectValue *value  = NULL;
-
-    OBJECT_CHECK(a_object);
+    char buffer[512] = { 0x00 };
 
-    // key
-    key = object_key__constructor_double(a_name, a_object);
-    if (!key){
-        PERROR("object_key__constructor_double() failed\n");
-        goto fail;
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
     }
+    OBJECT_CHECK(a_val);
 
-    // value
-    value = object_value__constructor(a_object);
-    if (!value){
-        PERROR("object_value__constructor() failed\n");
-        goto fail;
-    }
-    value->object = a_val;
-
-    // insert
-    object__ref_inc((Object *)key);
-    object__prop_set_obj_obj(
-        a_object,
-        key,
-        value
+    snprintf(buffer, sizeof(buffer),
+        "%g",
+        a_name
     );
 
-out:
-    if (key){
-        object__ref_dec((Object *)key);
-    }
-    return;
-fail:
-    goto out;
+    // set prop
+    object__prop_set(
+        a_table,
+        buffer,
+        a_val->id,
+        a_flags
+    );
 }
 
-void object__prop_set_str_obj(
+// ---------------- children ----------------
+
+void object__children_prop_set_info(
     Object      *a_object,
-    const char  *a_name,
-    Object      *a_val)
+    LinkName    *a_link_name,
+    LinkInfo    *a_link_info)
 {
-    ObjectKey   *key    = NULL;
-    ObjectValue *value  = NULL;
+    object__lock(a_object);
+    object__prop_set_link_info(
+        a_object->children,
+        a_link_name,
+        a_link_info
+    );
+    object__unlock(a_object);
+}
 
+void object__children_prop_set_double(
+    Object          *a_object,
+    const char      *a_name,
+    const double    a_val,
+    LinkFlags       a_flags)
+{
     OBJECT_CHECK(a_object);
     if (!a_name){
         TFATAL("missing argument: 'a_name'\n");
     }
 
-    // key
-    key = object_key__constructor(a_object);
-    if (!key){
-        PERROR("object_key_constructor() failed\n");
+    object__lock(a_object);
+    object__prop_set_double(
+        a_object->children,
+        a_name,
+        a_val,
+        a_flags
+    );
+    object__unlock(a_object);
+}
+
+void object__children_prop_set_str(
+    Object          *a_object,
+    const char      *a_name,
+    const char      *a_val,
+    LinkFlags       a_flags)
+{
+    OBJECT_CHECK(a_object);
+    if (!a_name){
+        TFATAL("missing argument: 'a_name'\n");
     }
 
-    object__mem_set_copy_str((Object *)key, a_name);
+    object__lock(a_object);
+    object__prop_set_str(
+        a_object->children,
+        a_name,
+        a_val,
+        a_flags
+    );
+    object__unlock(a_object);
+}
 
-    // value
-    value = object_value__constructor(a_object);
-    if (!value){
-        PERROR("object_value__constructor()\n");
-        goto fail;
+void object__children_prop_set_obj(
+    Object          *a_object,
+    const char      *a_name,
+    Object          *a_val,
+    LinkFlags       a_flags)
+{
+    OBJECT_CHECK(a_object);
+    if (!a_name){
+        TFATAL("missing argument: 'a_name'\n");
     }
+    OBJECT_CHECK(a_val);
 
-    value->object = a_val;
-
-    // insert
-    object__ref_inc((Object *)key);
-    object__ref_inc((Object *)value);
-    object__prop_set_obj_obj(
-        a_object,
-        key,
-        value
+    object__lock(a_object);
+    object__prop_set_obj(
+        a_object->children,
+        a_name,
+        a_val,
+        a_flags
     );
+    object__unlock(a_object);
+}
 
-out:
-    if (key){
-        object__ref_dec((Object *)key);
-    }
-    if (value){
-        object__ref_dec((Object *)value);
-    }
+void object__children_prop_set_double_obj(
+    Object          *a_object,
+    const double    a_name,
+    Object          *a_val,
+    LinkFlags       a_flags)
+{
+    OBJECT_CHECK(a_object);
+    OBJECT_CHECK(a_val);
 
-    return;
-fail:
-    goto out;
+    object__lock(a_object);
+    object__prop_set_double_obj(
+        a_object->children,
+        a_name,
+        a_val,
+        a_flags
+    );
+    object__unlock(a_object);
 }
 
 // ---------------- works with memory ----------------
 
 void object__mem_free(
-    Object      *a_window,
-    Object      *a_object)
+    Object  *a_object)
 {
-    OBJECT_CHECK(a_window);
     OBJECT_CHECK(a_object);
 
     if (a_object->mem){
-        a_window->mem_total_allocated -= a_object->mem_size;
         free(a_object->mem);
+        a_object->mem = NULL;
     }
 
     a_object->mem_size = 0;
 }
 
 int32_t object__mem_malloc(
-    Object      *a_window,
     Object      *a_object,
     uint64_t    a_size)
 {
     int32_t err = -1;
 
-    OBJECT_CHECK(a_window);
     OBJECT_CHECK(a_object);
 
-    object__mem_free(a_window, a_object);
+    object__mem_free(a_object);
 
     a_object->mem = malloc(a_size);
     if (!a_object->mem){
@@ -1932,8 +2261,7 @@ int32_t object__mem_malloc(
         goto fail;
     }
 
-    a_window->mem_total_allocated   += a_size;
-    a_object->mem_size              = a_size;
+    a_object->mem_size = a_size;
 
     // all ok
     err = 0;
@@ -1979,7 +2307,7 @@ uint32_t object__mem_add_printf_va(
 
     object__lock(a_object);
 
-    // get cur value length
+    // get cur link_info length
     if (a_object->mem){
         len = strlen(a_object->mem);
     }
@@ -2029,18 +2357,335 @@ uint32_t object__mem_add_printf_va(
     return res;
 }
 
-uint32_t object__prop_mem_add_printf(
-    Object      *a_object,
+// ---------------- cache info ----------------
+
+void cache_item__free(
+    CacheItem   *a_cache_item)
+{
+    if (a_cache_item){
+        TFATAL("missing argument: 'a_cache_item'\n");
+    }
+    if (!a_cache_item->object){
+        TFATAL("a_cache_item->object is NULL\n");
+    }
+    object__ref_dec(a_cache_item->object);
+    free(a_cache_item);
+}
+
+void cache_item__destroy_cb(
+    gpointer a_data)
+{
+    CacheItem *cache_item = (CacheItem *)a_data;
+    cache_item__free(cache_item);
+}
+
+CacheItem * cache_item__alloc()
+{
+    CacheItem   *cache_item = NULL;
+    int32_t     size        = sizeof(*cache_item);
+
+    cache_item = (CacheItem *)calloc(1, size);
+    if (!cache_item){
+        TFATAL("cannot allocate memory,"
+            " was needed: '%d' byte(s)\n",
+            size
+        );
+    }
+
+    return cache_item;
+}
+
+// ---------------- cache ----------------
+
+void cache_free(
+    Cache *a_cache)
+{
+    if (!a_cache){
+        TFATAL("missing argument: 'a_cache'\n");
+    }
+
+    g_hash_table_destroy(a_cache->objects);
+    a_cache->objects = NULL;
+
+    free(a_cache);
+}
+
+Cache * cache__alloc()
+{
+    Cache   *ret    = NULL;
+    int32_t size    = sizeof(*ret);
+
+    ret = (Cache *)calloc(1, size);
+    if (!ret){
+        PERROR("cannot allocate memory,"
+            " was needed '%d' byte(s)\n",
+            size
+        );
+        goto fail;
+    }
+
+    ret->objects = g_hash_table_new_full(
+        g_str_hash,
+        g_str_equal,
+        NULL, // cache_name__destroy_cb
+        cache_item__destroy_cb
+    );
+    if (!ret->objects){
+        PERROR("g_hash_table_new_full() failed\n");
+        goto fail;
+    }
+
+    // init mutex
+    pthread_mutexattr_init(&ret->mutex_attr);
+    pthread_mutexattr_settype(
+        &ret->mutex_attr,
+        PTHREAD_MUTEX_RECURSIVE
+    );
+    pthread_mutex_init(
+        &ret->mutex,
+        &ret->mutex_attr
+    );
+
+out:
+    return ret;
+
+fail:
+    if (ret){
+        cache__free(ret);
+        ret = NULL;
+    }
+    goto out;
+}
+
+void cache__lock(
+    Cache   *a_cache)
+{
+    int32_t res;
+
+    if (!a_cache){
+        TFATAL("missing argument: 'a_cache'\n");
+    }
+
+    res = pthread_mutex_lock(&a_cache->mutex);
+    if (res){
+        TFATAL("pthread_mutex_lock failed,"
+            " res: '%d'\n",
+            res
+        );
+    }
+}
+
+void cache__unlock(
+    Cache   *a_cache)
+{
+    int32_t res;
+
+    if (!a_cache){
+        TFATAL("missing argument: 'a_cache'\n");
+    }
+
+    res = pthread_mutex_unlock(&a_cache->mutex);
+    if (res){
+        TFATAL("pthread_mutex_unlock failed\n");
+    }
+}
+
+int32_t cache__get_item(
+    Cache       *a_cache,
+    const char  *a_id,
+    CacheItem   **a_out)
+{
+    int32_t err = -1;
+
+    if (!a_cache){
+        TFATAL("missing argument: 'a_cache'\n");
+    }
+    if (!a_id){
+        TFATAL("missing argument: 'a_id'\n");
+    }
+    if (!strlen(a_id)){
+        TFATAL("empty argument: 'a_id'\n");
+    }
+
+    cache__lock(a_cache);
+    *a_out = g_hash_table_lookup(a_cache->objects, a_id);
+    cache__unlock(a_cache);
+
+    // all ok
+    err = 0;
+
+    return err;
+}
+
+int32_t cache__set_item(
+    Cache       *a_cache,
+    const char  *a_id,
+    CacheItem   *a_item)
+{
+    int32_t err = -1;
+    char    *id = NULL;
+
+    if (!a_cache){
+        TFATAL("missing argument: 'a_cache'\n");
+    }
+    if (!a_id){
+        TFATAL("missing argument: 'a_id'\n");
+    }
+    if (!strlen(a_id)){
+        TFATAL("empty argument: 'a_id'\n");
+    }
+    if (!a_item){
+        TFATAL("missing argument: 'a_item'\n");
+    }
+
+    cache__lock(a_cache);
+
+    id = strdup(a_id);
+    if (!id){
+        PERROR("strdup() failed\n");
+        goto fail;
+    }
+
+    g_hash_table_insert(
+        a_cache->objects,
+        id,
+        a_item
+    );
+
+    // all ok
+    err = 0;
+
+out:
+    cache__unlock(a_cache);
+    return err;
+
+fail:
+    if (0 <= err){
+        err = -1;
+    }
+    goto out;
+}
+
+int32_t cache__set_object(
+    Cache   *a_cache,
+    Object  *a_object)
+{
+    int32_t     err         = -1;
+    CacheItem   *cache_item = NULL;
+
+    if (!a_cache){
+        TFATAL("missing argument: 'a_cache'\n");
+    }
+    OBJECT_CHECK(a_object);
+
+    cache__lock(a_cache);
+
+    cache_item = cache_item__alloc();
+    if (!cache_item){
+        PERROR("cache_item__alloc() failed\n");
+        goto fail;
+    }
+
+    cache_item->object = a_object;
+
+    cache__set_item(
+        a_cache,
+        a_object->id,
+        cache_item
+    );
+
+out:
+    cache__unlock(a_cache);
+    return err;
+
+fail:
+    goto out;
+}
+
+int32_t cache__get_object(
+    Cache       *a_cache,
+    const char  *a_id,
+    Object      **a_out)
+{
+    int32_t     res, err    = -1;
+    CacheItem   *cache_item = NULL;
+
+    *a_out = NULL;
+
+    if (!a_id){
+        TFATAL("missing argument: 'a_id'\n");
+    }
+    if (!strlen(a_id)){
+        TFATAL("empty argument: 'a_id'\n");
+    }
+
+    res = cache__get_item(a_cache, a_id, &cache_item);
+    if (res){
+        err = res;
+        goto fail;
+    }
+
+    if (!cache_item){
+        PERROR("cache_item is NULL\n");
+        goto fail;
+    }
+    if (!cache_item->object){
+        PERROR("cache_item->object is NULL\n");
+        goto fail;
+    }
+
+    object__ref_inc(cache_item->object);
+    *a_out = cache_item->object;
+
+    // all ok
+    err = 0;
+
+out:
+    return err;
+
+fail:
+    if (0 <= err){
+        err = -1;
+    }
+    goto out;
+}
+
+// ---------------- ----------------
+
+int32_t object__get_by_id(
+    const char  *a_id,
+    Object      **a_out)
+{
+    int32_t err = 0;
+
+    if (!g_cache){
+        g_cache = cache__alloc();
+    }
+
+    err = cache__get_object(
+        g_cache,
+        a_id,
+        a_out
+    );
+
+    return err;
+}
+
+int32_t object__prop_mem_add_printf(
+    GHashTable  *a_table,
+    uint8_t     a_create_if_not_exist,
     const char  *a_name,
     const char  *a_format,
-    ...)
+    va_list     *a_ap)
 {
-    uint32_t    ret     = 0;
-    Object      *val    = NULL;
-    va_list     ap;
+    int32_t     err         = -1;
+    LinkInfo    *link_info  = NULL;
+    Object      *object     = NULL;
     int32_t     res;
 
-    OBJECT_CHECK(a_object);
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
     if (!a_name){
         TFATAL("missing argument: 'a_name'\n");
     }
@@ -2048,55 +2693,135 @@ uint32_t object__prop_mem_add_printf(
         TFATAL("missing argument: 'a_format'\n");
     }
 
-    object__lock(a_object);
+    if (a_create_if_not_exist){
+        res = link_info__get_create_str(
+            a_table,
+            a_name,
+            &link_info
+        );
+        if (res){
+            err = res;
+            PERROR("link_info__get_create_str() failed\n");
+            goto fail;
+        }
+    } else {
+        res = link_info__get_str(
+            a_table,
+            a_name,
+            &link_info
+        );
+        if (res){
+            err = res;
+            PERROR("link_info__get_str() failed\n");
+            goto fail;
+        }
+    }
 
-    res = object__prop_get_str_obj(
-        a_object,
-        a_name,
-        &val
+    if (!strlen(link_info->object_id)){
+        // empty object id
+        if (!a_create_if_not_exist){
+            PERROR("link_info->object_id is NULL\n");
+            goto fail;
+        }
+        object = object__create("object", "");
+        if (!object){
+            PERROR("object__create() failed\n");
+            goto fail;
+        }
+        link_info__set_object_id(link_info, object->id);
+    } else {
+        // search object
+        res = object__get_by_id(
+            link_info->object_id,
+            &object
+        );
+        if (res){
+            PERROR("cannot get object by id: '%s'\n",
+                link_info->object_id
+            );
+            goto fail;
+        }
+    }
+
+    if (!object){
+        PERROR("object is NULL\n");
+        goto fail;
+    }
+
+    err = object__mem_add_printf_va(
+        object,
+        a_format,
+        a_ap
     );
-    if (res){
-        TFATAL("cannot get prop: '%s'\n", a_name);
+
+out:
+    if (object){
+        object__ref_dec(object);
+    }
+
+    return err;
+
+fail:
+    goto out;
+}
+
+int32_t object__children_mem_add_printf(
+    Object      *a_object,
+    uint8_t     a_create_if_not_exist,
+    const char  *a_name,
+    const char  *a_format,
+    ...)
+{
+    int32_t err = -1;
+    va_list ap;
+
+    OBJECT_CHECK(a_object);
+    if (!a_name){
+        TFATAL("missing argument: 'a_name'\n");
+    }
+    if (!a_format){
+        TFATAL("missing argument: 'a_format'\n");
     }
 
     va_start(ap, a_format);
-    ret = object__mem_add_printf_va(
-        val,
+    err = object__prop_mem_add_printf(
+        a_object->children,
+        a_create_if_not_exist,
+        a_name,
         a_format,
         &ap
     );
     va_end(ap);
 
-    object__ref_dec(val);
-
-    object__unlock(a_object);
-
-    return ret;
+    return err;
 }
 
-uint32_t object__mem_add_printf(
+int32_t object__mem_add_printf(
     Object      *a_object,
     const char  *a_format,
     ...)
 {
-    uint32_t ret = 0;
-    va_list  ap;
+    int32_t     res, err = -1;
+    va_list     ap;
 
     OBJECT_CHECK(a_object);
 
     object__lock(a_object);
 
     va_start(ap, a_format);
-    ret = object__mem_add_printf_va(
+    res = object__mem_add_printf_va(
         a_object,
         a_format,
         &ap
     );
+    if (res){
+        err = 0;
+    }
     va_end(ap);
 
     object__unlock(a_object);
 
-    return ret;
+    return err;
 }
 
 void object__mem_set(
@@ -2129,7 +2854,6 @@ void object__mem_set_copy_raw(
     uint64_t    a_data_size)
 {
     int32_t res;
-    Object  *window = NULL;
 
     OBJECT_CHECK(a_object);
     if (!a_data){
@@ -2138,9 +2862,6 @@ void object__mem_set_copy_raw(
 
     object__lock(a_object);
 
-    window = object__get_window_context(a_object);
-    OBJECT_CHECK(window);
-
     if (a_object->mem){
         free(a_object->mem);
         a_object->mem       = NULL;
@@ -2148,7 +2869,6 @@ void object__mem_set_copy_raw(
     }
 
     res = object__mem_malloc(
-        window,
         a_object,
         a_data_size
     );
@@ -2166,10 +2886,6 @@ void object__mem_set_copy_raw(
 
     memcpy(a_object->mem, a_data, a_data_size);
 
-    if (window){
-        object__ref_dec(window);
-    }
-
     object__unlock(a_object);
 }
 
@@ -2215,7 +2931,6 @@ void object__mem_copy_obj(
     Object      *a_data)
 {
     int32_t res;
-    Object  *window = NULL;
 
     OBJECT_CHECK(a_object);
     OBJECT_CHECK(a_data);
@@ -2223,9 +2938,6 @@ void object__mem_copy_obj(
     object__lock(a_object);
     object__lock(a_data);
 
-    window = object__get_window_context(a_object);
-    OBJECT_CHECK(window);
-
     if (a_object->mem){
         free(a_object->mem);
         a_object->mem_size = 0;
@@ -2233,7 +2945,6 @@ void object__mem_copy_obj(
 
     if (a_data->mem_size){
         res = object__mem_malloc(
-            window,
             a_object,
             a_data->mem_size
         );
@@ -2253,120 +2964,100 @@ void object__mem_copy_obj(
         memcpy(a_object->mem, a_data->mem, a_data->mem_size);
     }
 
-    if (window){
-        object__ref_dec(window);
-    }
-
     object__unlock(a_object);
     object__unlock(a_data);
 }
 
+/*
 // ---------------- prop del val ----------------
 
 void object__prop_del_obj(
     Object  *a_object,
-    Object  *a_name)
+    LinkName     *a_link_name)
 {
     OBJECT_CHECK(a_object);
-    OBJECT_CHECK(a_name);
+    if (!a_link_name){
+        TFATAL("missing argument: 'a_key'\n");
+    }
 
     object__lock(a_object);
     g_hash_table_remove(
         a_object->this,
-        a_name
+        a_key
     );
     object__unlock(a_object);
 }
 
 void object__prop_del_str(
     Object      *a_object,
-    const char  *a_name)
+    const char  *a_link_name)
 {
-    ObjectKey  *key = NULL;
+    LinkName     *key = NULL;
+    int32_t res;
 
     OBJECT_CHECK(a_object);
-    if (!a_name){
-        PFATAL("missing argument: 'a_name'\n");
+    if (!a_link_name){
+        TFATAL("missing argument: 'a_key'\n");
     }
 
-    key = object_key__constructor(a_object);
+    key = link_name__alloc();
     if (!key){
-        TFATAL("object_key__constructor() failed\n");
+        TFATAL("link_name__alloc() failed\n");
     }
 
-    object__mem_set_copy_str((Object *)key, a_name);
+    res = link_name__set_name(key, a_link_name);
+    if (res){
+        TFATAL("strdup() failed\n");
+    }
 
     object__prop_del_obj(
         a_object,
-        (Object *)key
+        key
     );
 
-    object__ref_dec((Object *)key);
+    link_name__free(key);
 }
 
 void object__prop_del_double(
     Object          *a_object,
-    const double    a_name)
+    const double    a_link_name)
 {
-    ObjectKey   *key    = NULL;
-    Object      *window = NULL;
-    uint64_t    size    = 0;
-    int32_t     res;
+    char    buffer[512] = { 0x00 };
+    LinkName     *key        = NULL;
+    int32_t res;
 
     OBJECT_CHECK(a_object);
 
-    window = object__get_window_context(a_object);
-    OBJECT_CHECK(window);
-
-    key = object_key__constructor(a_object);
+    key = link_name__alloc();
     if (!key){
         object__add_error(
             a_object,
             a_object,   // position
-            "object_key__constructor() failed\n"
+            "link_name__alloc() failed\n"
         );
         goto fail;
     }
 
-    size = sizeof(a_name);
-    res = object__mem_malloc(
-        window,
-        (Object *)key,
-        size
+    snprintf(buffer, sizeof(buffer),
+        "%g",
+        a_key
     );
+
+    res = link_name__set_name(key, buffer);
     if (res){
-#ifdef __x86_64__
-        object__add_error(
-            a_object,
-            a_object, // position
-            "canot allocate memory,"
-            " was needed '%lu' byte(s)\n",
-            size
-        );
-#else
         object__add_error(
             a_object,
             a_object, // position
-            "canot allocate memory,"
-            " was needed '%llu' byte(s)\n",
-            size
+            "strdup() failed\n"
         );
-#endif
         goto fail;
     }
-    memcpy(key->super.mem, &a_name, size);
 
-    object__prop_del_obj(
-        a_object,
-        (Object *)key
-    );
+    object__prop_del_obj(a_object, key);
 
 out:
     if (key){
-        object__ref_dec((Object *)key);
-    }
-    if (window){
-        object__ref_dec(window);
+        link_name__free(key);
     }
 
     return;
@@ -2374,34 +3065,37 @@ out:
 fail:
     goto out;
 }
+*/
 
-// ---------------- prop exist ----------------
+// ---------------- link exist ----------------
 
-int32_t object__prop_exist_obj(
-    Object  *a_object,
-    Object  *a_name)
+int32_t object__link_exist(
+    GHashTable  *a_table,
+    LinkName    *a_link_name)
 {
     int32_t exist = 0;
 
-    OBJECT_CHECK(a_object);
-    OBJECT_CHECK(a_name);
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
+    if (!a_link_name){
+        TFATAL("missing argument: 'a_link_name'\n");
+    }
 
-    object__lock(a_object);
     exist = g_hash_table_contains(
-        a_object->this,
-        a_name
+        a_table,
+        a_link_name
     );
-    object__unlock(a_object);
 
     return exist;
 }
 
-int32_t object__prop_exist_str(
+int32_t object__children_link_exist(
     Object      *a_object,
     const char  *a_name)
 {
-    ObjectKey   *key    = NULL;
-    int32_t     found   = 0;
+    LinkName    *link_name  = NULL;
+    int32_t     found       = 0;
 
     OBJECT_CHECK(a_object);
     if (!a_name){
@@ -2409,19 +3103,23 @@ int32_t object__prop_exist_str(
     }
 
     // create temporary key
-    key = object_key__constructor(a_object);
-    if (!key){
-        TFATAL("object_key_constructor() failed\n");
+    link_name = link_name__alloc();
+    if (!link_name){
+        TFATAL("link_name__alloc() failed\n");
     }
 
-    object__mem_set_copy_str((Object *)key, a_name);
+    link_name__set_name(link_name, a_name);
 
-    found = object__prop_exist_obj(
-        a_object,
-        (Object *)key
+    object__lock(a_object);
+
+    found = object__link_exist(
+        a_object->children,
+        link_name
     );
 
-    object__ref_dec((Object *)key);
+    object__unlock(a_object);
+
+    link_name__free(link_name);
 
     return found;
 }
@@ -2538,7 +3236,7 @@ Object *    object__call_with_args1_obj(
         TFATAL("missing argument: 'a_method'\n");
     }
 
-    args = object_array__constructor(a_object);
+    args = object_array__constructor(a_object->id);
     if (!args){
         object__ref_dec(a_arg);
         TFATAL("object_array_constructor() failed\n");
@@ -2585,20 +3283,20 @@ ObjectString * object__call_with_args1_obj_str(
         ""
     );
     if (!ret){
-        // free return value
+        // free return link_info
         object__ref_dec(val);
         val = NULL;
 
 #ifdef __x86_64__
         PWARN("object: 0x%lx, method: '%s',"
-            " return value type is not 'string' (%s)\n",
+            " return link_info type is not 'string' (%s)\n",
             (uint64_t)val,
             a_method,
             val->type
         );
 #else
         PWARN("object: 0x%x, method: '%s',"
-            " return value type is not 'string' (%s)\n",
+            " return link_info type is not 'string' (%s)\n",
             (uint32_t)val,
             a_method,
             val->type
@@ -2626,7 +3324,7 @@ Object *    object__call_with_args1_double(
         TFATAL("missing argument: 'a_method'\n");
     }
 
-    args = object_array__constructor(a_object);
+    args = object_array__constructor(a_object->id);
     if (!args){
         TFATAL("object_array_constructor() failed\n");
     }
@@ -2656,7 +3354,7 @@ Object *    object__call(
         TFATAL("missing argument: 'a_method'\n");
     }
 
-    args = object_array__constructor(a_object);
+    args = object_array__constructor(a_object->id);
     if (!args){
         TFATAL("object_array__constructor() failed\n");
     }
@@ -2689,8 +3387,9 @@ void object__to_string_cb(
 
 // ---------------- serialize ----------------
 
-void object__serialize_cb(
-    Object      *a_object,
+void object__serialize_table(
+    GHashTable  *a_table,
+    const char  *a_prefix,
     Object      *a_out,
     const char  *a_delimeter)
 {
@@ -2698,58 +3397,43 @@ void object__serialize_cb(
     GList   *cur_key    = NULL;
     int32_t res;
 
-    OBJECT_CHECK(a_object);
-    OBJECT_CHECK(a_out);
+    if (!a_table){
+        TFATAL("missing argument: 'a_table'\n");
+    }
+    if (!a_prefix){
+        TFATAL("missing argument: 'a_prefix'\n");
+    }
+    if (!a_out){
+        TFATAL("missing argument: 'a_out'\n");
+    }
     if (!a_delimeter){
         TFATAL("missing argument: 'a_delimeter'\n");
     }
 
-#ifdef __x86_64__
-    PDEBUG(100, "object: (0x%lx)\n", (uint64_t)a_object);
-#else
-    PDEBUG(100, "object: (0x%x)\n", (uint32_t)a_object);
-#endif
-
-    // lock
-    object__lock(a_object);
-    object__lock(a_out);
-
-    PDEBUG(100, "---"
-        " There are '%d' key(s)"
-        " in the hash table"
-        " ---\n",
-        g_hash_table_size(a_object->this)
+    // parents
+    object__mem_add_printf(
+        a_out,
+        "%s{",
+        a_prefix ? a_prefix : ""
     );
 
-    object__mem_add_printf(a_out, "%s", "{");
-
-    keys = g_hash_table_get_keys(a_object->this);
+    keys = g_hash_table_get_keys(a_table);
     for (cur_key = keys; cur_key; cur_key = cur_key->next){
-        Object      *tmp = (Object *)cur_key->data;
-        ObjectKey   *key = NULL;
-        Object      *val = NULL;
-
-        key = dynamic_pointer_cast(
-            ObjectKey,
-            tmp,
-            "object_key",
-            ""
-        );
-        if (!key){
-            TFATAL("key is not object_key\n");
-        }
+        LinkName    *link_name  = NULL;
+        LinkInfo    *link_info  = NULL;
 
-        res = object__prop_get_obj_obj(
-            a_object,
-            key,
-            &val
+        link_name = (LinkName *)cur_key->data;
+
+        res = link_info__get_str(
+            a_table,
+            link_name__mem_c_str(link_name),
+            &link_info
         );
         if (res){
-            OBJECT__DUMP(val, "val: ");
-            TFATAL("cannot get prop by key: '%s',"
-                " val: 0x%lx\n",
-                (const char *)key->super.mem,
-                (uint64_t)val
+            TFATAL("cannot get link info: '%s',"
+                " link_info: 0x%lx\n",
+                link_name__mem_c_str(link_name),
+                (uint64_t)link_info
             );
         }
 
@@ -2757,21 +3441,13 @@ void object__serialize_cb(
             object__mem_add_printf(a_out, "%s", ", ");
         }
 
-        object__serialize((Object *)key, a_out, a_delimeter);
+        object__mem_add_printf(a_out, "%s",
+            link_name__mem_c_str(link_name)
+        );
         object__mem_add_printf(a_out, "%s", a_delimeter);
-
-        if (!strcmp(object_key__mem_c_str(key), "prototype")){
-            object__mem_add_printf(a_out, "undefined");
-        } else if (val){
-            if ((void *)val == (void *)a_object){
-                object__mem_add_printf(a_out, "this");
-            } else {
-                object__serialize(val, a_out, a_delimeter);
-            }
-            object__ref_dec(val);
-        } else {
-            object__mem_add_printf(a_out, "undefined");
-        }
+        object__mem_add_printf(a_out, "%s",
+            link_info->object_id
+        );
     }
 
     object__mem_add_printf(a_out, "%s", "}");
@@ -2780,6 +3456,56 @@ void object__serialize_cb(
         g_list_free(keys);
         keys = NULL;
     }
+}
+
+void object__serialize_cb(
+    Object      *a_object,
+    Object      *a_out,
+    const char  *a_delimeter)
+{
+    OBJECT_CHECK(a_object);
+    OBJECT_CHECK(a_out);
+    if (!a_delimeter){
+        TFATAL("missing argument: 'a_delimeter'\n");
+    }
+
+#ifdef __x86_64__
+    PDEBUG(100, "object: (0x%lx)\n", (uint64_t)a_object);
+#else
+    PDEBUG(100, "object: (0x%x)\n", (uint32_t)a_object);
+#endif
+
+    // lock
+    object__lock(a_object);
+    object__lock(a_out);
+
+    object__serialize_table(
+        a_object->parents,
+        "parents: ",
+        a_out,
+        a_delimeter
+    );
+
+    object__serialize_table(
+        a_object->neighs_left,
+        "neighs left: ",
+        a_out,
+        a_delimeter
+    );
+
+    object__serialize_table(
+        a_object->neighs_left,
+        "neighs right: ",
+        a_out,
+        a_delimeter
+    );
+
+    object__serialize_table(
+        a_object->children,
+        "children: ",
+        a_out,
+        a_delimeter
+    );
 
     // unlock
     object__unlock(a_out);
@@ -2849,10 +3575,11 @@ void object__length_set(
 {
     OBJECT_CHECK(a_object);
 
-    object__prop_set_str_double(
+    object__children_prop_set_double(
         (Object *)a_object,
         "length",
-        a_val
+        a_val,
+        LINK_FLAG_FROM | LINK_FLAG_TO
     );
 }
 
@@ -2871,7 +3598,7 @@ void object__dump(
     va_list     ap;
     int32_t     res;
 
-    dump = object__constructor(a_object);
+    dump = object__constructor(a_object->id);
     if (!dump){
         TFATAL_POS(
             a_file,
@@ -3000,15 +3727,16 @@ void object__addEventListener(
     );
     if (res){
         // handlers not found, create new
-        handlers = object__constructor(a_object);
+        handlers = object__constructor(a_object->id);
         if (!handlers){
             TFATAL("object__constructor() failed\n");
         }
         object__ref_inc((Object *)handlers);
-        object__prop_set_str_obj(
+        object__children_prop_set_obj(
             a_object,
             "handlers",
-            handlers
+            handlers,
+            LINK_FLAG_FROM | LINK_FLAG_TO
         );
     }
 
@@ -3019,24 +3747,26 @@ void object__addEventListener(
     );
     if (res){
         // action handlers not found, create new
-        action_handlers = object__constructor(a_object);
+        action_handlers = object__constructor(a_object->id);
         if (!action_handlers){
             TFATAL("object__constructor() failed\n");
         }
         object__ref_inc((Object *)action_handlers);
-        object__prop_set_str_obj(
+        object__children_prop_set_obj(
             handlers,
             a_action_name,
-            action_handlers
+            action_handlers,
+            LINK_FLAG_FROM | LINK_FLAG_TO
         );
     }
 
     // add handler
     object__ref_inc((Object *)a_code_define);
-    object__prop_set_str_obj(
+    object__children_prop_set_obj(
         action_handlers,
         buffer, // code_define addr
-        (Object *)a_code_define
+        (Object *)a_code_define,
+        LINK_FLAG_FROM | LINK_FLAG_TO
     );
 
     if (handlers){
@@ -3140,7 +3870,8 @@ fail:
 }
 
 // it will dec a_action ref count
-void object__dispatchEvent(
+void object__dispatch_action(
+    // TODO use GHashTable instead Object
     Object          *a_object,
     ObjectAction    *a_action)
 {
@@ -3153,8 +3884,6 @@ void object__dispatchEvent(
     OBJECT_CHECK(a_object);
     OBJECT_CHECK(a_action);
 
-    object__lock((Object *)a_object);
-
     // get handlers
     object__prop_get_str_obj(
         a_object,
@@ -3175,26 +3904,17 @@ void object__dispatchEvent(
         goto out;
     }
 
-    keys = g_hash_table_get_keys(action_handlers->this);
+    keys = g_hash_table_get_keys(action_handlers->children);
     for (cur_key = keys; cur_key; cur_key = cur_key->next){
-        Object              *tmp            = (Object *)cur_key->data;
-        ObjectKey           *key            = NULL;
+        LinkName            *link_name      = NULL;
         Object              *val            = NULL;
         ObjectCodeDefine    *code_define    = NULL;
 
-        key = dynamic_pointer_cast(
-            ObjectKey,
-            tmp,
-            "object_key",
-            ""
-        );
-        if (!key){
-            TFATAL("key is not object_key\n");
-        }
+        link_name = (LinkName *)cur_key->data;
 
         res = object__prop_get_obj_obj(
             action_handlers,
-            key,
+            link_name,
             &val
         );
         if (res){
@@ -3202,7 +3922,7 @@ void object__dispatchEvent(
             OBJECT__DUMP(val, "val: ");
             TFATAL("cannot get prop by key: '%s',"
                 " val: 0x%lx\n",
-                object_key__mem_c_str(key),
+                link_name__mem_c_str(link_name),
                 (uint64_t)val
             );
         }
@@ -3215,7 +3935,7 @@ void object__dispatchEvent(
         );
         if (!code_define){
             PWARN("skip: '%s'\n",
-                object_key__mem_c_str(key)
+                link_name__mem_c_str(link_name)
             );
             object__ref_dec(val);
             continue;
@@ -3225,7 +3945,7 @@ void object__dispatchEvent(
         {
             uint64_t func_addr = 0;
             res = sscanf(
-                object_key__mem_c_str(key),
+                link_name__mem_c_str(link_name),
                 "0x%lx",
                 &func_addr
             );
@@ -3234,17 +3954,17 @@ void object__dispatchEvent(
         {
             uint32_t func_addr = 0;
             res = sscanf(
-                object_key__mem_c_str(key),
+                link_name__mem_c_str(link_name),
                 "0x%x",
                 &func_addr
             );
         }
 #endif
         if (res){
-            Object          *val            = NULL;
-            ObjectArray     *args           = NULL;
+            Object          *val    = NULL;
+            ObjectArray     *args   = NULL;
 
-            args = object_array__constructor(a_object);
+            args = object_array__constructor(a_object->id);
 
             object__ref_inc((Object *)a_action);
             object_array__push_obj(args, (Object *)a_action);
@@ -3330,12 +4050,12 @@ Object *    object__api_dispatchEvent(
     // now works with timeout_obj instead val
     val = NULL;
 
-    object__dispatchEvent(
+    object__dispatch_action(
         a_object,
         action
     );
 
-    // don't free action it will do 'object__dispatchEvent'
+    // don't free action it will do 'object__dispatch_action'
     action = NULL;
 
 out:
@@ -3395,7 +4115,7 @@ Object *    object__get_parent_context(
 
     object__prop_get_str_obj(
         a_context,
-        "prototype",
+        "parent",
         &ret
     );
 
@@ -3410,9 +4130,15 @@ Object *    object__get_window_context(
 
     OBJECT_CHECK(a_context);
 
+    PWARN("search context\n");
+
     cur = a_context;
     object__ref_inc(cur);
     while (cur){
+        PWARN("cur->type: '%s', cur->class_name: '%s'\n",
+            cur->type,
+            cur->class_name
+        );
         if (    !strcmp(cur->type,       "object")
             &&  !strcmp(cur->class_name, "Window"))
         {
@@ -3422,57 +4148,53 @@ Object *    object__get_window_context(
         }
         object__ref_dec(cur);
         cur = object__get_parent_context(cur);
+        if (!cur){
+            PWARN("parent context is NULL\n");
+        }
     }
     if (cur){
         object__ref_dec(cur);
     }
 
+    PWARN("context found: '%s'\n", window ? "yes" : "no");
+
     return window;
 }
 
 int32_t object__item_resolve(
     Object      *a_context,
     Object      *a_position,
-    ListItem    *a_item,
+    Object      **a_object,
     Flags       *a_flags)
 {
     int32_t res, err        = -1;
     Object  *val            = NULL;
-    Object  *object         = NULL;
     Object  *new_context    = NULL;
 
     OBJECT_CHECK(a_context);
-    if (!a_item){
-        TFATAL("missing argument: 'a_item'\n");
-    }
+    OBJECT_CHECK(*a_object);
 
     object__lock(a_context);
 
-    object = a_item->object;
-    if (object){
-        OBJECT_CHECK(object);
-    }
-
-    if (    object
-        &&  object->parser_type
-        &&  !strcmp(object->parser_type, "variable"))
+    if (    (*a_object)->parser_type
+        &&  !strcmp((*a_object)->parser_type, "variable"))
     {
         if (*a_flags & FLAG_RESOLVER_DONT_RESOLVE_VARS){
-            object__ref_inc(object);
-            val = object;
+            object__ref_inc(*a_object);
+            val = *a_object;
         } else {
             if (*a_flags & FLAG_RESOLVER_CREATE_VAR){
                 // create empty var if not exist
                 res = object__var_exist(
                     a_context,
                     a_position,
-                    object__mem_c_str(object)
+                    object__mem_c_str(*a_object)
                 );
                 if (!res){
                     res = object__var_set(
                         a_context,
                         a_position,
-                        object__mem_c_str(object),
+                        object__mem_c_str(*a_object),
                         NULL
                     );
                 }
@@ -3481,7 +4203,7 @@ int32_t object__item_resolve(
             res = object__var_get(
                 a_context,
                 a_position,
-                object__mem_c_str(object),
+                object__mem_c_str(*a_object),
                 &val,
                 1   // not exist is error
             );
@@ -3508,7 +4230,7 @@ int32_t object__item_resolve(
                 //
                 // so do workaround
 
-                tmp = strdup(object__mem_c_str(object));
+                tmp = strdup(object__mem_c_str(*a_object));
                 if (!tmp){
                     object__add_error(
                         a_context,
@@ -3534,29 +4256,29 @@ int32_t object__item_resolve(
         //    *a_flags,
         //    (uint64_t)val
         //);
-    } else if ( object
-        &&      object->type
-        &&      !strcmp(object->type, "object_value"))
+/*
+    } else if ( *a_object->type
+        &&      !strcmp(*a_object->type, "link_info"))
     {
         if (*a_flags & FLAG_RESOLVER_DONT_RESOLVE_PTRS){
-            object__ref_inc(object);
-            val = object;
+            object__ref_inc(*a_object);
+            val = *a_object;
         } else {
-            ObjectValue *value = NULL;
+            LinkInfo *link_info = NULL;
 
-            value = (ObjectValue *)object;
-            if (value->object){
-                object__ref_inc(value->object);
+            link_info = (LinkInfo *)*a_object;
+            if (link_info->object){
+                object__ref_inc(link_info->object);
             }
-            val = value->object;
+            val = link_info->object;
         }
-    } else if ( object
-        &&      object->type
-        &&      !strcmp(object->type, "code_call"))
+*/
+    } else if ( (*a_object)->type
+        &&      !strcmp((*a_object)->type, "code_call"))
     {
-        ObjectCodeCall  *code_call      = NULL;
+        ObjectCodeCall  *code_call = NULL;
 
-        code_call = (ObjectCodeCall *)object;
+        code_call = (ObjectCodeCall *)*a_object;
 
         OBJECT_CHECK(code_call->context);
 
@@ -3635,7 +4357,7 @@ int32_t object__item_resolve(
                     );
                     //object__add_error(
                     //    a_context,
-                    //    object,
+                    //    *a_object,
                     //    "cannot get arg name for pos: '%g'\n",
                     //    pos
                     //);
@@ -3693,17 +4415,15 @@ int32_t object__item_resolve(
             goto fail;
         }
     } else {
-        if (object){
-            object__ref_inc(object);
+        if (*a_object){
+            object__ref_inc(*a_object);
         }
-        val = object;
+        val = *a_object;
     }
 
     // replace object on resolved object
-    if (a_item->object){
-        object__ref_dec(a_item->object);
-    }
-    a_item->object = val;
+    object__ref_dec(*a_object);
+    *a_object = val;
 
     // all ok
     err = 0;
@@ -3712,8 +4432,11 @@ out:
     if (new_context){
         object__ref_dec(new_context);
     }
+
     object__unlock(a_context);
+
     return err;
+
 fail:
     goto out;
 }
@@ -3726,7 +4449,7 @@ int32_t object__var_get(
     uint8_t         a_not_exist_is_error)
 {
     Object      *cur_context    = NULL;
-    Object      *prototype      = NULL;
+    Object      *parent      = NULL;
     int32_t     res, err        = -1;
     uint8_t     *name           = NULL;
 
@@ -3830,13 +4553,23 @@ int32_t object__var_get(
         goto out;
     }
 
-    if (!strcmp(a_name, "this")){
+    if (!strcmp(a_name, "self")){
         object__ref_inc(a_context);
         *a_out = a_context;
         err    = 0;
         goto out;
     }
 
+    if (!strcmp(a_name, "this")){
+        object__prop_get_create_str_obj(
+            a_context,
+            "children",
+            a_out
+        );
+        err = 0;
+        goto out;
+    }
+
     cur_context = a_context;
     while (cur_context){
         // maybe var in context?
@@ -3852,20 +4585,20 @@ int32_t object__var_get(
         }
 
         // maybe we have super context and var there?
-        if (prototype){
-            object__ref_dec(prototype);
+        if (parent){
+            object__ref_dec(parent);
         }
         object__prop_get_str_obj(
             cur_context,
-            "prototype",
-            &prototype
+            "parent",
+            &parent
         );
 
-        cur_context = prototype;
+        cur_context = parent;
     }
 
-    if (prototype){
-        object__ref_dec(prototype);
+    if (parent){
+        object__ref_dec(parent);
     }
 
 out:
@@ -3959,10 +4692,11 @@ int32_t object__var_set(
                     // cur symbol is '\0',
                     // so it's last element,
                     // just set new val
-                    object__prop_set_str_obj(
+                    object__children_prop_set_obj(
                         left_object,
                         ptr,
-                        a_val
+                        a_val,
+                        LINK_FLAG_FROM | LINK_FLAG_TO
                     );
                     err = 0;
                     goto out;
@@ -4016,10 +4750,11 @@ int32_t object__var_set(
         } while (loop);
     } else {
         // store variable
-        object__prop_set_str_obj(
+        object__children_prop_set_obj(
             a_context,
             a_name,
-            a_val
+            a_val,
+            LINK_FLAG_FROM | LINK_FLAG_TO
         );
     }
 
@@ -4049,7 +4784,7 @@ int32_t object__is_error(
 
     OBJECT_CHECK(a_context);
 
-    res = object__prop_exist_str(
+    res = object__children_link_exist(
         a_context,
         "error"
     );
@@ -4070,20 +4805,22 @@ void object__add_error(
     int32_t         res;
     va_list         ap;
 
-    res = object__prop_exist_str(
+    res = object__children_link_exist(
         a_context,
         "error"
     );
     if (!res){
-        object__prop_set_str_str(
+        object__children_prop_set_str(
             a_context,
             "error",
-            ""
+            "remove me",
+            LINK_FLAG_TO | LINK_FLAG_FROM
         );
     }
 
-    object__prop_mem_add_printf(
+    object__children_mem_add_printf(
         a_context,
+        1,      // create if not exist
         "error",
         "--- near of"
         " line: '%d', col: '%d', file pos: '%d' "
@@ -4155,15 +4892,15 @@ void object__parser_cb(
     short   a_event,
     void    *a_arg)
 {
-    Object  *context = NULL;
+    Object  *object = NULL;
     int32_t res;
 
-    context = (Object *)a_arg;
-    if (!context){
-        TFATAL("missing argument: 'context'\n");
+    object = (Object *)a_arg;
+    if (!object){
+        TFATAL("missing argument: 'object'\n");
     }
 
-    object__lock((Object *)context);
+    object__lock(object);
 
     do {
         Object          *val    = NULL;
@@ -4171,21 +4908,21 @@ void object__parser_cb(
         double          length  = 0;
 
         object__length_get(
-            (Object *)context->code_queue,
+            (Object *)object->code_queue,
             &length
         );
 
         res = object_array__shift(
-            (ObjectArray *)context->code_queue,
+            (ObjectArray *)object->code_queue,
             &val
         );
         if (res){
-            // value not found
+            // link_info not found
             break;
         }
 
         object__length_get(
-            (Object *)context->code_queue,
+            (Object *)object->code_queue,
             &length
         );
 
@@ -4197,7 +4934,7 @@ void object__parser_cb(
         );
         if (!buffer){
             object__add_error(
-                context,
+                object,
                 NULL,
                 "code buffer by index 0"
                 " is not 'string' (%s)\n",
@@ -4208,9 +4945,9 @@ void object__parser_cb(
         }
 
         val = object__parse_buffer(
-            context,
+            object,
             NULL, // position
-            buffer
+            object_string__mem_c_str(buffer)
         );
         if (val){
             object__ref_dec(val);
@@ -4220,7 +4957,7 @@ void object__parser_cb(
     } while (1);
 
 out:
-    object__unlock((Object *)context);
+    object__unlock(object);
     return;
 
 fail:
@@ -4229,8 +4966,8 @@ fail:
 
 // ignition!
 Object *    object__parse_file(
-    Object          *a_context,
-    ObjectString    *a_path)
+    Object          *a_object,
+    const char      *a_path)
 {
     Object          *ret    = NULL;
     ObjectString    *buffer = NULL;
@@ -4238,15 +4975,19 @@ Object *    object__parse_file(
     struct timeval  tv;
     int32_t         res;
 
-    OBJECT_CHECK(a_context);
-    OBJECT_CHECK(a_path);
+    OBJECT_CHECK(a_object);
+    if (    !a_path
+        ||  !strlen(a_path))
+    {
+        TFATAL("missing argument: 'a_path'\n");
+    }
 
-    object__lock(a_context);
+    object__lock(a_object);
 
-    buffer = object_string__constructor(a_context);
+    buffer = object_string__constructor(a_object->id);
     if (!buffer){
         object__add_error(
-            a_context,
+            a_object,
             NULL,
             "object_string__constructor() failed\n"
         );
@@ -4259,10 +5000,10 @@ Object *    object__parse_file(
     );
     if (res){
         object__add_error(
-            a_context,
+            a_object,
             NULL,
             "cannot load data from: '%s'\n",
-            object_string__mem_c_str(a_path)
+            a_path
         );
         goto fail;
     }
@@ -4270,26 +5011,26 @@ Object *    object__parse_file(
     // queue code for parse
     object__ref_inc((Object *)buffer);
     object_array__push_obj(
-        (ObjectArray *)a_context->code_queue,
+        (ObjectArray *)a_object->code_queue,
         (Object *)buffer
     );
 
-    if (!a_context->event_base){
+    if (!a_object->event_base){
         object__add_error(
-            a_context,
+            a_object,
             NULL,
-            "a_context->event_base is NULL\n"
+            "a_object->event_base is NULL\n"
         );
         goto fail;
     }
 
     // init event
     ev = event_new(
-        a_context->event_base,
+        a_object->event_base,
         -1,     // fd
         0,      // EV_PERSIST,
         object__parser_cb,
-        a_context
+        a_object
     );
 
     // timeout in microseconds
@@ -4299,7 +5040,7 @@ Object *    object__parse_file(
     event_add(ev, &tv);
 
     // fire!
-    object__run(a_context);
+    object__run(a_object);
 
     event_free(ev);
 
@@ -4321,7 +5062,7 @@ Object * object__stack_create(
 {
     Object  *new_context   = NULL;
 
-    new_context = object__constructor(a_context);
+    new_context = object__constructor(a_context->id);
     if (!new_context){
         object__add_error(
             a_context,
@@ -4521,7 +5262,7 @@ void object__items_dump(
         );
     }
 
-    dump = object__constructor(a_window);
+    dump = object__constructor(a_window->id);
     if (!dump){
         TFATAL_POS(
             a_file,
@@ -4574,7 +5315,7 @@ void object__items_dump(
         cur_object = cur_item->object;
 
         if (cur_object){
-            serialized = object__constructor(a_window);
+            serialized = object__constructor(a_window->id);
             if (!serialized){
                 free(descr);
                 object__ref_dec(dump);
@@ -4679,7 +5420,7 @@ void    object__statement_define(
 
     object__lock(a_context);
 
-    statement = object_statement__constructor(a_context);
+    statement = object_statement__constructor(a_context->id);
     if (!statement){
         object__add_error(
             a_context,
@@ -4691,7 +5432,9 @@ void    object__statement_define(
 
     statement->func = a_func;
 
-    tmp = object__constructor((Object *)statement);
+    tmp = object__constructor(
+        ((Object *)statement)->id
+    );
     if (!tmp){
         object__add_error(
             a_context,
@@ -4749,7 +5492,9 @@ void    object__operator_define(
 
     object__lock(a_context);
 
-    operator = object_operator__constructor(a_context);
+    operator = object_operator__constructor(
+        a_context->id
+    );
     if (!operator){
         object__add_error(
             a_context,
@@ -4769,7 +5514,9 @@ void    object__operator_define(
         a_operator
     );
 
-    tmp = object__constructor((Object *)operator);
+    tmp = object__constructor(
+        ((Object *)operator)->id
+    );
     if (!tmp){
         object__add_error(
             a_context,
@@ -4823,7 +5570,7 @@ int32_t object__is_statement(
 
     object__lock(a_context);
 
-    tmp = object__constructor(a_context);
+    tmp = object__constructor(a_context->id);
     if (!tmp){
         object__add_error(
             a_context,
@@ -4927,7 +5674,7 @@ Object *    object__statement_if(
 
     // ------------ process brackets (condition) ------------
 
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_statement,
         &right_item,
@@ -4966,7 +5713,7 @@ Object *    object__statement_if(
     );
 
     // remove condition
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_statement,
         &right_item,
@@ -4992,7 +5739,7 @@ Object *    object__statement_if(
 
     // ------------ collect true code ------------
 
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_statement,
         &right_item,
@@ -5043,7 +5790,7 @@ Object *    object__statement_if(
         object__add_error(
             a_context,
             a_statement->object,
-            "statement: '%s', return value from"
+            "statement: '%s', return link_info from"
             " object__statement_brace_code"
             " is not array (%s)\n",
             statement,
@@ -5062,7 +5809,7 @@ Object *    object__statement_if(
 
     // ------------ check else ------------
 
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_statement,
         &right_item,
@@ -5086,7 +5833,7 @@ Object *    object__statement_if(
 
     // ------------ collect false code ------------
 
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_statement,
         &right_item,
@@ -5140,7 +5887,7 @@ Object *    object__statement_if(
         object__add_error(
             a_context,
             a_statement->object,
-            "statement: '%s', return value from"
+            "statement: '%s', return link_info from"
             " object__statement_brace_code"
             " is not array (%s)\n",
             statement,
@@ -5329,7 +6076,7 @@ Object *    object__statement_for(
         ListItem *right_item   = NULL;
         Object   *right_object = NULL;
 
-        res = list_item_right(
+        res = object__neigh_get_right(
             a_code,
             a_statement,
             &right_item,
@@ -5476,7 +6223,7 @@ Object *    object__statement_for(
         Object   *right_object  = NULL;
         Object   *val           = NULL;
 
-        res = list_item_right(
+        res = object__neigh_get_right(
             a_code,
             a_statement,
             &right_item,
@@ -5522,7 +6269,7 @@ Object *    object__statement_for(
             object__add_error(
                 a_context,
                 a_statement->object,
-                "statement: '%s', return value from"
+                "statement: '%s', return link_info from"
                 " object__statement_brace_code"
                 " is not array (%s)\n",
                 statement,
@@ -5766,7 +6513,7 @@ Object *    object__statement_function(
     flags |= FLAG_COMMA_RETURN_ARRAY;
     flags |= FLAG_BRACKET_RETURN_ARRAY;
 
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_statement,
         &right_item,
@@ -5783,7 +6530,7 @@ Object *    object__statement_function(
     }
 
     code_define = object_code_define__constructor(
-        a_context
+        a_context->id
     );
     if (!code_define){
         object__add_error(
@@ -5810,7 +6557,7 @@ Object *    object__statement_function(
         function_name = right_item;
 
         // get next part
-        list_item_right(
+        object__neigh_get_right(
             a_code,
             function_name,
             &right_item,
@@ -5871,7 +6618,7 @@ Object *    object__statement_function(
     // ------------ collect code ------------
 
     // re-read right part
-    list_item_right(
+    object__neigh_get_right(
         a_code,
         a_statement,
         &right_item,
@@ -6063,7 +6810,7 @@ Object *    object__statement_brace_code(
 
     object__lock(a_context);
 
-    code = object_array__constructor(a_context);
+    code = object_array__constructor(a_context->id);
     if (!code){
         object__add_error(
             a_context,
@@ -6200,7 +6947,7 @@ Object *    object__statement_brace_array(
             &&  !strcmp((const char *)cur_object->mem,
                 "{"))
         {
-            // maybe value is associative array too
+            // maybe link_info is associative array too
             deep++;
         } else if (cur_object
             &&  cur_object->parser_type
@@ -6216,7 +6963,7 @@ Object *    object__statement_brace_array(
             // del last symbol '}'
             list_item_free(cur_item);
 
-            // process value as code if exist
+            // process link_info as code if exist
             // (because it can contain any code)
             {
                 Object  *val            = NULL;
@@ -6425,7 +7172,7 @@ int32_t object__get_operator_weight(
 
     object__lock(a_context);
 
-    tmp = object__constructor(a_context);
+    tmp = object__constructor(a_context->id);
     if (!tmp){
         object__add_error(
             a_context,
@@ -6455,9 +7202,9 @@ int32_t object__get_operator_weight(
         0   // not exist is error
     );
     if (res){
-        PWARN("operator: '%s' not found\n",
-            object__mem_c_str(tmp)
-        );
+        //PWARN("operator: '%s' not found\n",
+        //    object__mem_c_str(tmp)
+        //);
         goto fail;
     }
 
@@ -6491,10 +7238,10 @@ out:
 
     object__unlock(a_context);
 
-    PWARN("operator: '%s', weight: '%d'\n",
-       a_operator,
-        ret
-    );
+    //PWARN("operator: '%s', weight: '%d'\n",
+    //   a_operator,
+    //    ret
+    //);
 
     return ret;
 
@@ -6557,7 +7304,7 @@ Object *    object__operator_return(
     *a_flags |= FLAG_RETURN;
 
     // get right part
-    list_item_right(
+    object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -6573,7 +7320,7 @@ Object *    object__operator_return(
         );
 
         // get right part
-        list_item_right(
+        object__neigh_get_right(
             a_code,
             a_operator,
             &right_item,
@@ -6647,7 +7394,7 @@ Object * object__operator_assign(
     }
 
     // get right part
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -6672,7 +7419,7 @@ Object * object__operator_assign(
         a_flags
     );
     // reread right part
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -6717,24 +7464,27 @@ Object * object__operator_assign(
             object__ref_inc(right_object);
         }
         ret = right_object;
-    } else if ( left_object
+    }
+/*
+    else if ( left_object
         &&      left_object->type
-        &&      !strcmp(left_object->type, "object_value"))
+        &&      !strcmp(left_object->type, "link_info"))
     {
-        ObjectValue *value = (ObjectValue *)left_object;
-        if (value->object){
-            object__ref_dec(value->object);
+        LinkInfo *link_info = (LinkInfo *)left_object;
+        if (link_info->object){
+            object__ref_dec(link_info->object);
         }
         if (right_object){
             object__ref_inc(right_object);
         }
-        value->object = right_object;
+        link_info->object = right_object;
         // add to ret
         if (right_object){
             object__ref_inc(right_object);
         }
         ret = right_object;
     }
+*/
 
 out:
     // remove left part
@@ -6940,7 +7690,7 @@ Object *    object__operator_colon(
     }
 
     // get right part
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -6962,7 +7712,7 @@ Object *    object__operator_colon(
         a_flags
     );
 
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -6974,7 +7724,7 @@ Object *    object__operator_colon(
     }
     right_var = right_object;
 
-    // store cur value
+    // store cur link_info
 
     if (    left_object
         &&  !strcmp(left_object->type, "string"))
@@ -7109,7 +7859,7 @@ Object *    object__operator_logical_or(
         &left
     );
 
-    list_item_right(
+    object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -7148,10 +7898,7 @@ Object *    object__operator_logical_or(
     //PWARN("left_result: '%d'\n", left_result);
 
     if (left_result){
-        result = object_boolean__constructor_double(
-            1,
-            a_context
-        );
+        result = object_boolean__constructor_double(1);
         if (!result){
             object__add_error(
                 a_context,
@@ -7173,7 +7920,7 @@ Object *    object__operator_logical_or(
         right_item,
         a_flags
     );
-    list_item_right(
+    object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -7195,10 +7942,7 @@ Object *    object__operator_logical_or(
         goto fail;
     }
     if (right_result){
-        result = object_boolean__constructor_double(
-            1,
-            a_context
-        );
+        result = object_boolean__constructor_double(1);
         if (!result){
             object__add_error(
                 a_context,
@@ -7214,10 +7958,7 @@ Object *    object__operator_logical_or(
 
 out:
     if (!result){
-        result = object_boolean__constructor_double(
-            0,
-            a_context
-        );
+        result = object_boolean__constructor_double(0);
         if (!result){
             object__add_error(
                 a_context,
@@ -7330,7 +8071,7 @@ Object *    object__operator__compare(
     );
 
     // resolve right
-    list_item_right(
+    object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -7357,7 +8098,7 @@ Object *    object__operator__compare(
         right_item,
         a_flags
     );
-    list_item_right(
+    object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -7447,7 +8188,7 @@ Object *    object__operator__compare(
         if (right){
             ObjectString *str = NULL;
 
-            str = object_string__constructor(a_context);
+            str = object_string__constructor(a_context->id);
             if (!str){
                 object__add_error(
                     a_context,
@@ -7473,7 +8214,7 @@ Object *    object__operator__compare(
         if (left){
             ObjectString *str = NULL;
 
-            str = object_string__constructor(a_context);
+            str = object_string__constructor(a_context->id);
             if (!str){
                 object__add_error(
                     a_context,
@@ -7513,8 +8254,7 @@ Object *    object__operator__compare(
     }
 
     ret = (Object *)object_boolean__constructor_double(
-        result,
-        a_context
+        result
     );
     if (!ret){
         object__add_error(
@@ -7644,7 +8384,7 @@ Object *    object__operator__arithmetic(
     );
 
     // get right part
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -7674,17 +8414,19 @@ Object *    object__operator__arithmetic(
             );
             goto fail;
         }
+/*
     } else if (    left_object
         &&  left_object->type
-        &&  !strcmp(left_object->type, "object_value"))
+        &&  !strcmp(left_object->type, "link_info"))
     {
-        ObjectValue *value = NULL;
+        LinkInfo *link_info = NULL;
 
-        value = (ObjectValue *)left_object;
-        if (value->object){
-            object__ref_inc(value->object);
+        link_info = (LinkInfo *)left_object;
+        if (link_info->object){
+            object__ref_inc(link_info->object);
         }
-        left_var = value->object;
+        left_var = link_info->object;
+*/
     } else {
         if (left_object){
             object__ref_inc(left_object);
@@ -7715,15 +8457,17 @@ Object *    object__operator__arithmetic(
             );
             goto fail;
         }
+/*
     } else if (    right_object
         &&  right_object->type
-        &&  !strcmp(right_object->type, "object_value"))
+        &&  !strcmp(right_object->type, "link_info"))
     {
-        ObjectValue *value = (ObjectValue *)right_object;
-        if (value->object){
-            object__ref_inc(value->object);
+        LinkInfo *link_info = (LinkInfo *)right_object;
+        if (link_info->object){
+            object__ref_inc(link_info->object);
         }
-        right_var = value->object;
+        right_var = link_info->object;
+*/
     } else {
         if (right_object){
             object__ref_inc(right_object);
@@ -7748,7 +8492,7 @@ Object *    object__operator__arithmetic(
             // both parts are undefined
             ObjectNumber *val = NULL;
 
-            val = object_number__constructor(a_context);
+            val = object_number__constructor(a_context->id);
             if (!val){
                 object__add_error(
                     a_context,
@@ -7780,10 +8524,7 @@ Object *    object__operator__arithmetic(
             res  = *((double *)left_var->mem);
             res += *((double *)right_var->mem);
 
-            val = object_number__constructor_double(
-                res,
-                a_context
-            );
+            val = object_number__constructor_double(res);
             if (!val){
                 object__add_error(
                     a_context,
@@ -7802,10 +8543,7 @@ Object *    object__operator__arithmetic(
             res  = *((double *)left_var->mem);
             res -= *((double *)right_var->mem);
 
-            val = object_number__constructor_double(
-                res,
-                a_context
-            );
+            val = object_number__constructor_double(res);
             if (!val){
                 object__add_error(
                     a_context,
@@ -7824,10 +8562,7 @@ Object *    object__operator__arithmetic(
             res  = *((double *)left_var->mem);
             res *= *((double *)right_var->mem);
 
-            val = object_number__constructor_double(
-                res,
-                a_context
-            );
+            val = object_number__constructor_double(res);
             if (!val){
                 object__add_error(
                     a_context,
@@ -7846,10 +8581,7 @@ Object *    object__operator__arithmetic(
             res  = *((double *)left_var->mem);
             res /= *((double *)right_var->mem);
 
-            val = object_number__constructor_double(
-                res,
-                a_context
-            );
+            val = object_number__constructor_double(res);
             if (!val){
                 object__add_error(
                     a_context,
@@ -7871,10 +8603,7 @@ Object *    object__operator__arithmetic(
                 res = 1;
             }
 
-            val = object_boolean__constructor_double(
-                res,
-                a_context
-            );
+            val = object_boolean__constructor_double(res);
             if (!val){
                 object__add_error(
                     a_context,
@@ -7896,10 +8625,7 @@ Object *    object__operator__arithmetic(
                 res = 1;
             }
 
-            val = object_boolean__constructor_double(
-                res,
-                a_context
-            );
+            val = object_boolean__constructor_double(res);
             if (!val){
                 object__add_error(
                     a_context,
@@ -7921,10 +8647,7 @@ Object *    object__operator__arithmetic(
                 res = 1;
             }
 
-            val = object_boolean__constructor_double(
-                res,
-                a_context
-            );
+            val = object_boolean__constructor_double(res);
             if (!val){
                 object__add_error(
                     a_context,
@@ -7946,10 +8669,7 @@ Object *    object__operator__arithmetic(
                 res = 1;
             }
 
-            val = object_boolean__constructor_double(
-                res,
-                a_context
-            );
+            val = object_boolean__constructor_double(res);
             if (!val){
                 object__add_error(
                     a_context,
@@ -8002,10 +8722,7 @@ Object *    object__operator__arithmetic(
             if (left_result && right_result){
                 res = 1;
             }
-            val = object_boolean__constructor_double(
-                res,
-                a_context
-            );
+            val = object_boolean__constructor_double(res);
             if (!val){
                 object__add_error(
                     a_context,
@@ -8030,7 +8747,7 @@ Object *    object__operator__arithmetic(
         if (!strcmp(operator, "+")){
             // process as strings
             result = (Object *)object_string__constructor(
-                a_context
+                a_context->id
             );
             if (!result){
                 object__add_error(
@@ -8064,10 +8781,7 @@ Object *    object__operator__arithmetic(
             // at least one part is not number
             ObjectNumber *val = NULL;
 
-            val = object_number__constructor_double(
-                0,
-                a_context
-            );
+            val = object_number__constructor_double(0);
             if (!val){
                 object__add_error(
                     a_context,
@@ -8138,10 +8852,7 @@ Object *    object__operator__arithmetic(
             if (left_boolean && right_boolean){
                 res = 1;
             }
-            val = object_boolean__constructor_double(
-                res,
-                a_context
-            );
+            val = object_boolean__constructor_double(res);
             if (!val){
                 object__add_error(
                     a_context,
@@ -8289,7 +9000,7 @@ Object *    object__operator__inc_dec(
         &left_object
     );
 
-    list_item_right(
+    object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -8560,7 +9271,7 @@ Object *    object__operator_comma_to_array(
         goto fail;
     }
 
-    res = list_item_right(
+    res = object__neigh_get_right(
         a_code,
         a_operator,
         &right_item,
@@ -8585,7 +9296,7 @@ Object *    object__operator_comma_to_array(
     } else {
         // left part is not 'comma_vars', convert
         left_comma_vars = object_array__constructor(
-            a_context
+            a_context->id
         );
         if (!left_comma_vars){
             object__add_error(
@@ -8907,7 +9618,7 @@ Object *    object__operator_comma(
     // resolve right var
     {
         // get right part
-        res = list_item_right(
+        res = object__neigh_get_right(
             a_code,
             a_operator,
             &right_item,
@@ -8945,7 +9656,7 @@ Object *    object__operator_comma(
     }
 
     if (*a_flags & FLAG_COMMA_RETURN_ARRAY){
-        // convert values to array
+        // convert link_infos to array
         ret = object__operator_comma_to_array(
             a_context,
             a_code,
@@ -9207,7 +9918,7 @@ Object *    object__operator_bracket_generic(
         );
         if (!args){
             args = object_array__constructor(
-                a_context
+                a_context->id
             );
             if (!args){
                 object__add_error(
@@ -9311,7 +10022,7 @@ Object * object__detect_context(
         if (    ret
             &&  strcmp(ret->type, "object"))
         {
-            // variable value is not object
+            // variable link_info is not object
             object__ref_dec(ret);
             ret = NULL;
         }
@@ -9386,7 +10097,7 @@ Object *    object__operator_bracket(
     // );
     // because of 'var' will set FLAG_RESOLVER_CREATE_VAR
     // all new vars will be re/created (and will rewrite
-    // old values if exist), so third argument: 'a_context'
+    // old link_infos if exist), so third argument: 'a_context'
     // will be 'undefined' (because will be re/created),
     // so remove flags
     *a_flags &= ~FLAG_RESOLVER_CREATE_VAR;
@@ -9464,14 +10175,15 @@ Object *    object__operator_bracket(
         *a_flags |= FLAG_COMMA_RETURN_ARRAY;
         *a_flags |= FLAG_BRACKET_RETURN_ARRAY;
         *a_flags |= FLAG_BRACE_CODE;
+/*
     } else if ( left_object
         &&      !strcmp(left_object->type, "object_value"))
     {
-        ObjectValue *value  = NULL;
-        Object      *val    = NULL;
+        LinkInfo    *link_info  = NULL;
+        Object      *val        = NULL;
 
-        value       = (ObjectValue *)left_object;
-        val         = value->object;
+        link_info   = (LinkInfo *)left_object;
+        val         = link_info->object;
 
         code_define = dynamic_pointer_cast(
             ObjectCodeDefine,
@@ -9497,6 +10209,7 @@ Object *    object__operator_bracket(
         *a_flags |= FLAG_COMMA_RETURN_ARRAY;
         *a_flags |= FLAG_BRACKET_RETURN_ARRAY;
         *a_flags |= FLAG_BRACE_CODE;
+*/
     } else if ( left_object
         &&      !strcmp(left_object->type, "code_define"))
     {
@@ -9558,7 +10271,7 @@ Object *    object__operator_bracket(
         ret = NULL;
 
         code_call = object_code_call__constructor(
-            a_context
+            a_context->id
         );
         if (!code_call){
             object__ref_dec((Object *)args);
@@ -9750,7 +10463,7 @@ Object *    object__process_statement(
         goto fail;
     }
 
-    tmp = object__constructor(a_context);
+    tmp = object__constructor(a_context->id);
     if (!tmp){
         object__add_error(
             a_context,
@@ -9891,7 +10604,7 @@ Object *    object__process_operator(
 
     object__lock(a_context);
 
-    tmp = object__constructor(a_context);
+    tmp = object__constructor(a_context->id);
     if (!tmp){
         object__add_error(
             a_context,
@@ -10142,7 +10855,7 @@ again:
             object__mem_c_str(cur_object)
         );
 
-        PWARN("weight: '%d'\n", weight);
+        //PWARN("weight: '%d'\n", weight);
 
         if (max_operator_weight < weight){
             max_operator_weight = weight;
@@ -10224,7 +10937,7 @@ again:
 
         //OBJECT__DUMP(cur_item->object, "after resolve: ");
 
-        // replace return value
+        // replace return link_info
         {
             if (ret){
                 object__ref_dec(ret);
@@ -10273,12 +10986,12 @@ void object__store_pos_info(
 }
 
 Object * object__parse_buffer(
-    Object          *a_context,
+    Object          *a_object,
     Object          *a_position,
-    ObjectString    *a_buffer)
+    const char      *a_buffer)
 {
     Object          *ret        = NULL;
-    Object          *parser     = a_context;
+    Object          *parser     = a_object;
     ObjectString    *tmp_word   = NULL;
     int32_t         state       = 0;
     double          length      = 0;
@@ -10289,32 +11002,24 @@ Object * object__parse_buffer(
     ListItem        code;
     int32_t         res;
 
-    OBJECT_CHECK(a_context);
+    OBJECT_CHECK(a_object);
     if (!a_buffer){
         TFATAL("missing argument: 'a_buffer'\n");
     }
 
+    length = strlen(a_buffer);
+    if (!length){
+        TFATAL("empty argument: 'a_buffer'\n");
+    }
+
     object__lock(parser);
 
     // init code list
     memset(&code, 0x00, sizeof(code));
     INIT_LIST_HEAD(&code.list);
 
-    // init tmp word
-    tmp_word = object_string__constructor(
-        a_context
-    );
-    if (!tmp_word){
-        object__add_error(
-            a_context,
-            NULL,
-            "object_string__constructor() failed\n"
-        );
-        goto fail;
-    }
-
     // get code length
-    object__length_get((Object *)a_buffer, &length);
+    length = strlen(a_buffer);
 
     parser->parser_pos  = 0;
     parser->parser_line = 1;
@@ -10325,20 +11030,17 @@ Object * object__parse_buffer(
         parser->parser_pos++)
     {
         // maybe we have errors?
-        res = object__is_error(a_context);
+        res = object__is_error(a_object);
         if (res){
             break;
         }
 
         // read cur char
-        res = object_string__charAt(
-            a_buffer,
-            parser->parser_pos,
-            &c
-        );
-        if (res){
+        if (length > parser->parser_pos){
+            c = a_buffer[parser->parser_pos];
+        } else {
             object__add_error(
-                a_context,
+                a_object,
                 NULL,
                 "cannot read char from pos: '%d'\n",
                 parser->parser_pos
@@ -10347,11 +11049,11 @@ Object * object__parse_buffer(
         }
 
         // read next char
-        object_string__charAt(
-            a_buffer,
-            parser->parser_pos + 1,
-            &c_next
-        );
+        if (length > (parser->parser_pos + 1)){
+            c_next = a_buffer[parser->parser_pos + 1];
+        } else {
+            c_next = 0;
+        }
 
         if ('\n' == c_prev){
             parser->parser_line++;
@@ -10391,19 +11093,17 @@ again:
                     // about tmp_word, so we don't need dec
                     // ref count here
                     object__add_item(
-                        a_context,
+                        a_object,
                         &code,
                         "constant",
                         (Object *)tmp_word
                     );
 
                     // prepare new tmp_word
-                    tmp_word = object_string__constructor(
-                        a_context
-                    );
+                    tmp_word = object_string__constructor();
                     if (!tmp_word){
                         object__add_error(
-                            a_context,
+                            a_object,
                             NULL,
                             "object_string__constructor()"
                             " failed\n"
@@ -10494,13 +11194,13 @@ again:
 
                     if (!is_undefined){
                         is_statement = object__is_statement(
-                            a_context,
+                            a_object,
                             (Object *)tmp_word,
                             &flags,
                             object_string__mem_c_str(tmp_word)
                         );
                         is_operator = object__is_operator(
-                            a_context,
+                            a_object,
                             (Object *)tmp_word,
                             &flags,
                             object_string__mem_c_str(tmp_word)
@@ -10512,21 +11212,21 @@ again:
                     // ref count here
                     if (is_statement){
                         object__add_item(
-                            a_context,
+                            a_object,
                             &code,
                             "statement",
                             (Object *)tmp_word
                         );
                     } else if (is_operator){
                         object__add_item(
-                            a_context,
+                            a_object,
                             &code,
                             "operator",
                             (Object *)tmp_word
                         );
                     } else if (is_undefined){
                         object__add_item(
-                            a_context,
+                            a_object,
                             &code,
                             "constant",
                             NULL
@@ -10548,11 +11248,10 @@ again:
                             !strcmp(
                                 (const char *)tmp_word->super.mem,
                                 "true"
-                            ) ? 1 : 0,
-                            a_context
+                            ) ? 1 : 0
                         );
                         object__add_item(
-                            a_context,
+                            a_object,
                             &code,
                             "constant",
                             (Object *)val
@@ -10562,7 +11261,7 @@ again:
                         tmp_word = NULL;
                     } else {
                         object__add_item(
-                            a_context,
+                            a_object,
                             &code,
                             "variable",
                             (Object *)tmp_word
@@ -10570,12 +11269,10 @@ again:
                     }
 
                     // prepare new tmp_word
-                    tmp_word = object_string__constructor(
-                        a_context
-                    );
+                    tmp_word = object_string__constructor();
                     if (!tmp_word){
                         object__add_error(
-                            a_context,
+                            a_object,
                             NULL,
                             "object_string__constructor()"
                             " failed\n"
@@ -10606,12 +11303,11 @@ again:
                     val = object_number__constructor_double(
                         object_string__to_double(
                             tmp_word
-                        ),
-                        a_context
+                        )
                     );
 
                     object__add_item(
-                        a_context,
+                        a_object,
                         &code,
                         "constant",
                         (Object *)val
@@ -10621,11 +11317,11 @@ again:
 
                     // prepare new tmp_word
                     tmp_word = object_string__constructor(
-                        a_context
+                        a_object->id
                     );
                     if (!tmp_word){
                         object__add_error(
-                            a_context,
+                            a_object,
                             NULL,
                             "object_string__constructor()"
                             " failed\n"
@@ -10636,7 +11332,7 @@ again:
                     goto again;
                 } else {
                     object__add_error(
-                        a_context,
+                        a_object,
                         NULL,
                         "unexpected char: '%c'\n",
                         c
@@ -10667,12 +11363,11 @@ again:
                     val = object_number__constructor_double(
                         object_string__to_double(
                             tmp_word
-                        ),
-                        a_context
+                        )
                     );
 
                     object__add_item(
-                        a_context,
+                        a_object,
                         &code,
                         "constant",
                         (Object *)val
@@ -10682,11 +11377,11 @@ again:
 
                     // prepare new tmp_word
                     tmp_word = object_string__constructor(
-                        a_context
+                        a_object->id
                     );
                     if (!tmp_word){
                         object__add_error(
-                            a_context,
+                            a_object,
                             NULL,
                             "object_string__constructor()"
                             " failed\n"
@@ -10725,7 +11420,7 @@ again:
             case STATE_OPERATOR_TWO_SYMBOLS:
                 {
                     object__store_pos_info(
-                        a_context,
+                        a_object,
                         tmp_word
                     );
                     object__mem_add_printf(
@@ -10738,7 +11433,7 @@ again:
                     // about tmp_word, so we don't need dec
                     // ref count here
                     object__add_item(
-                        a_context,
+                        a_object,
                         &code,
                         "operator",
                         (Object *)tmp_word
@@ -10746,11 +11441,11 @@ again:
 
                     // prepare new tmp_word
                     tmp_word = object_string__constructor(
-                        a_context
+                        a_object->id
                     );
                     if (!tmp_word){
                         object__add_error(
-                            a_context,
+                            a_object,
                             NULL,
                             "object_string__constructor()"
                             " failed\n"
@@ -10777,7 +11472,7 @@ again:
                     ||      ('A' <= c && 'Z' >= c))
                 {
                     object__store_pos_info(
-                        a_context,
+                        a_object,
                         tmp_word
                     );
                     object__mem_add_printf(
@@ -10799,7 +11494,7 @@ again:
                     &&      '9' >= c)
                 {
                     object__store_pos_info(
-                        a_context,
+                        a_object,
                         tmp_word
                     );
                     object__mem_add_printf(
@@ -10810,13 +11505,13 @@ again:
                     state = STATE_WORD_COLLECT_NUMBER_INTEGER;
                 } else if ('\'' == c){
                     object__store_pos_info(
-                        a_context,
+                        a_object,
                         tmp_word
                     );
                     state = STATE_WORD_COLLECT_STRING1;
                 } else if ('"' == c){
                     object__store_pos_info(
-                        a_context,
+                        a_object,
                         tmp_word
                     );
                     state = STATE_WORD_COLLECT_STRING2;
@@ -10842,7 +11537,7 @@ again:
                     ||      '}' == c)
                 {
                     object__store_pos_info(
-                        a_context,
+                        a_object,
                         tmp_word
                     );
                     object__mem_add_printf(
@@ -10855,7 +11550,7 @@ again:
                     // about tmp_word, so we don't need dec
                     // ref count here
                     object__add_item(
-                        a_context,
+                        a_object,
                         &code,
                         "statement",
                         (Object *)tmp_word
@@ -10863,11 +11558,11 @@ again:
 
                     // prepare new tmp_word
                     tmp_word = object_string__constructor(
-                        a_context
+                        a_object->id
                     );
                     if (!tmp_word){
                         object__add_error(
-                            a_context,
+                            a_object,
                             NULL,
                             "object_string__constructor()"
                             " failed\n"
@@ -10892,7 +11587,7 @@ again:
                     ||      ';' == c)
                 {
                     object__store_pos_info(
-                        a_context,
+                        a_object,
                         tmp_word
                     );
                     object__mem_add_printf(
@@ -10905,7 +11600,7 @@ again:
                     // about tmp_word, so we don't need dec
                     // ref count here
                     object__add_item(
-                        a_context,
+                        a_object,
                         &code,
                         "operator",
                         (Object *)tmp_word
@@ -10913,11 +11608,11 @@ again:
 
                     // prepare new tmp_word
                     tmp_word = object_string__constructor(
-                        a_context
+                        a_object->id
                     );
                     if (!tmp_word){
                         object__add_error(
-                            a_context,
+                            a_object,
                             NULL,
                             "object_string__constructor()"
                             " failed\n"
@@ -10927,7 +11622,7 @@ again:
                     state = STATE_PREPROCESSOR;
                 } else {
                     object__add_error(
-                        a_context,
+                        a_object,
                         NULL,
                         "unexpected char: '%c'\n",
                         c
@@ -10938,7 +11633,7 @@ again:
 
             default:
                 object__add_error(
-                    a_context,
+                    a_object,
                     NULL,
                     "unsupported state: '%d'\n",
                     state
@@ -10950,19 +11645,18 @@ again:
     }
 
 done:
-    res = object__is_error(a_context);
+    res = object__is_error(a_object);
     if (    !res
         &&  !list_empty(&code.list))
     {
         ret = object__process_code(
-            a_context,
+            a_object,
             a_position,
             &code,
             &flags
         );
     }
 
-out:
     list_items_free(&code);
 
     if (tmp_word){
@@ -10972,8 +11666,6 @@ out:
     object__unlock(parser);
 
     return ret;
-fail:
-    goto out;
 }
 
 // api alert
@@ -10992,7 +11684,7 @@ Object *    object__api_alert(
 
     //OBJECT__DUMP((Object *)a_args, "a_args: ");
 
-    serialized = object__constructor(a_context);
+    serialized = object__constructor(a_context->id);
     if (!serialized){
         object__add_error(
             a_context,
@@ -11049,10 +11741,7 @@ void object__read_cb(
     object__lock((Object *)context);
 
     // send event about 'read'
-    action = object_action__constructor(
-        "read",
-        context
-    );
+    action = object_action__constructor("read");
     if (!action){
         object__add_error(
             context,
@@ -11062,10 +11751,11 @@ void object__read_cb(
         goto fail;
     }
 
-    object__prop_set_str_obj(
+    object__children_prop_set_obj(
         (Object *)action,
         "target",
-        (Object *)connection
+        (Object *)connection,
+        LINK_FLAG_FROM | LINK_FLAG_TO
     );
 
     // get input
@@ -11075,18 +11765,18 @@ void object__read_cb(
     // create new string
     data = object_string__constructor_raw(
         (const char *)EVBUFFER_DATA(in),
-        len - 1,
-        (Object *)action
+        len - 1
     );
     // add data to action
-    object__prop_set_str_obj(
+    object__children_prop_set_obj(
         (Object *)action,
         "data",
-        (Object *)data
+        (Object *)data,
+        LINK_FLAG_FROM | LINK_FLAG_TO
     );
     evbuffer_drain(in, len);
 
-    object__dispatchEvent(context, action);
+    object__dispatch_action(context, action);
 
 out:
     object__unlock((Object *)connection);
@@ -11116,10 +11806,7 @@ void object__event_cb(
     object__lock(context);
 
     // send event about 'event'
-    action = object_action__constructor(
-        "event",
-        context
-    );
+    action = object_action__constructor("event");
     if (!action){
         object__add_error(
             context,
@@ -11131,14 +11818,14 @@ void object__event_cb(
 
     OBJECT__DUMP((Object *)connection, "connection:\n");
 
-    object__prop_set_str_obj(
+    object__children_prop_set_obj(
         (Object *)action,
         "target",
-        (Object *)connection
+        (Object *)connection,
+        LINK_FLAG_FROM | LINK_FLAG_TO
     );
 
-
-    object__dispatchEvent(context, action);
+    object__dispatch_action(context, action);
 
 out:
     object__unlock(context);
@@ -11165,7 +11852,7 @@ void object__accept_cb(
     }
 
     // create new connection
-    connection = object_connection__constructor(context);
+    connection = object_connection__constructor(context->id);
     connection->fd      = a_fd;
     connection->context = context;
 
@@ -11190,17 +11877,15 @@ void object__accept_cb(
     bufferevent_enable(connection->be, EV_READ | EV_WRITE);
 
     // send event about 'accept'
-    action = object_action__constructor(
-        "accept",
-        context
-    );
+    action = object_action__constructor("accept");
     object__ref_inc((Object *)connection);
-    object__prop_set_str_obj(
+    object__children_prop_set_obj(
         (Object *)action,
         "target",
-        (Object *)connection
+        (Object *)connection,
+        LINK_FLAG_FROM | LINK_FLAG_TO
     );
-    object__dispatchEvent((Object *)context, action);
+    object__dispatch_action((Object *)context, action);
 }
 
 // api listen
@@ -11339,7 +12024,9 @@ void object__timer_cb(
         goto fail;
     }
 
-    code_call = object_code_call__constructor(timer->context);
+    code_call = object_code_call__constructor(
+        timer->context->id
+    );
     if (!code_call){
         object__add_error(
             timer->context,
@@ -11530,9 +12217,9 @@ Object *    object__api_setTimeout(
 
     // init timers queue
     if (!parent_context->timers){
-        parent_context->timers = (struct obect_array *)
+        parent_context->timers = (struct object_array *)
             object_array__constructor(
-                (Object *)parent_context
+                ((Object *)parent_context)->id
             );
         if (!parent_context->timers){
             PERROR("object_array__constructor() failed\n");
@@ -11541,7 +12228,7 @@ Object *    object__api_setTimeout(
     }
 
     // init timer
-    timer = object_timer__constructor(parent_context);
+    timer = object_timer__constructor(parent_context->id);
     if (!timer){
         object__add_error(
             a_context,
@@ -11603,8 +12290,7 @@ Object *    object__api_setTimeout(
     event_add(timer->ev, &tv);
 
     ret = (Object *)object_number__constructor_double(
-        timer->id,
-        a_context
+        timer->id
     );
     if (!ret){
         object__add_error(
@@ -11708,8 +12394,7 @@ Object *    object__api_Action(
 
     // create action
     ret = object_action__constructor(
-        object_string__mem_c_str(name),
-        a_context
+        object_string__mem_c_str(name)
     );
     if (!ret){
         object__add_error(
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object.h
index 52e36fb..7155db7 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object.h
@@ -43,7 +43,6 @@ typedef enum
     STATE_FOR_COLLECT_NEXT
 } ForState;
 
-
 typedef enum
 {
     FLAG_RESOLVER_CREATE_VAR        = (1 << 0), //  1
@@ -58,9 +57,7 @@ typedef enum
     FLAG_FUNCTION_CALL_NEW          = (1 << 9), //  512
 } Flags;
 
-#define OBJECT__DUMP(a_object, a_format, ...)
-
-#define OBJECT__DUMP1(a_object, a_format, ...)          \
+#define OBJECT__DUMP(a_object, a_format, ...)           \
     object__dump(                                       \
         __FILE__,                                       \
         __LINE__,                                       \
@@ -83,6 +80,7 @@ typedef enum
 struct object
 {
     // object info
+    const char              *id;
     const char              *type;
     const char              *parser_type;
     const char              *class_name;
@@ -106,11 +104,13 @@ struct object
         const char      *a_delimeter
     );
 
-    // context
-    //struct object           *context;
+    // links
+    GHashTable              *parents;
+    GHashTable              *neighs_left;
+    GHashTable              *neighs_right;
+    GHashTable              *children;
 
     // memory
-    GHashTable              *this;
     int32_t                 ref_count;
     void                    *mem;
     uint64_t                mem_size;
@@ -120,8 +120,8 @@ struct object
     int32_t                 max_operator_weight;
     struct event_base       *event_base;
     struct evdns_base       *dns_base;
-    struct obect_array      *timers;
-    struct obect_array      *code_queue;
+    struct object_array     *timers;
+    struct object_array     *code_queue;
 };
 typedef struct object Object;
 
@@ -153,9 +153,6 @@ int32_t         list_item_right(
 );
 
 #define OBJECT__ITEMS_DUMP(                                 \
-    a_window, a_code, a_format, ...)
-
-#define OBJECT__ITEMS_DUMP1(                                \
     a_window, a_code, a_format, ...)                        \
     do {                                                    \
         object__items_dump(                                 \
@@ -183,48 +180,119 @@ int32_t         list_item_right(
 #include "object_array.h"
 #include "object_number.h"
 
-// ---------------- object key ----------------
+// ---------------- cache item ----------------
 
-struct object_key
+struct cache_item
 {
-    Object  super;
+    Object  *object;
 };
-typedef struct object_key ObjectKey;
+typedef struct cache_item CacheItem;
 
-void        object_key__destructor_cb(Object *);
-ObjectKey * object_key__constructor();
-void        object_key__serialize_cb(
-    Object          *a_object,
-    Object          *a_out,
-    const char      *a_delimeter
+void        cache_item__free(CacheItem *a_cache_item);
+CacheItem * cache_item__alloc();
+void        cache_item__destroy_cb(gpointer a_data);
+int32_t     cache_item__get_info(
+    const char  *a_id,
+    CacheItem   **a_out
 );
-ObjectKey * object_key__constructor_str(
-    const char      *a_str,
-    Object          *a_prototype
+int32_t     cache_item__set_info(
+    const char  *a_id,
+    CacheItem   *a_info
 );
-ObjectKey * object_key__constructor_double(
-    const double    a_str,
-    Object          *a_prototype
+int32_t     cache_item__set_object(
+    Object      *a_object
 );
-const char * object_keyword__mem_c_str(
-    ObjectKey *a_object
+int32_t     cache_item__get_object(
+    const char  *a_id,
+    Object      **a_out
 );
 
-// ---------------- object value ----------------
+// ---------------- cache ----------------
 
-struct object_value
+struct cache
 {
-    Object  super;
-    Object  *object;
+    GHashTable              *objects;
+    pthread_mutex_t         mutex;
+    pthread_mutexattr_t     mutex_attr;
 };
-typedef struct object_value ObjectValue;
+typedef struct cache Cache;
 
-void            object_value__destructor_cb(Object *);
-ObjectValue *   object_value__constructor();
-void            object_value__serialize_cb(
-    Object          *a_object,
-    Object          *a_out,
-    const char      *a_delimeter
+void        cache__free(Cache *);
+Cache   *   cache__alloc();
+void        cache__lock(Cache *);
+void        cache__unlock(Cache *);
+int32_t     cache__set_item(
+    Cache       *a_cache,
+    const char  *a_id,
+    CacheItem   *a_info
+);
+
+// ---------------- link_name ----------------
+
+struct link_name
+{
+    char    *mem;
+};
+typedef struct link_name LinkName;
+
+void            link_name__free(LinkName *);
+LinkName *      link_name__alloc();
+LinkName *      link_name__alloc_str(const char *);
+LinkName *      link_name__alloc_double(const double);
+const char *    link_name__mem_c_str(LinkName *);
+
+// ---------------- link_info ----------------
+
+typedef enum
+{
+    LINK_FLAG_FROM  = (1 << 0),
+    LINK_FLAG_TO    = (1 << 1)
+} LinkFlags;
+
+struct link_info
+{
+    char        *object_id;
+    LinkFlags   flags;
+};
+typedef struct link_info LinkInfo;
+
+void        link_info__free(LinkInfo *);
+LinkInfo *  link_info__constructor();
+void        link_info__set_object_id(
+    LinkInfo    *a_link_info,
+    const char  *a_object_id
+);
+void        link_info__set_flags(
+    LinkInfo    *a_link_info,
+    LinkFlags   a_flags
+);
+int32_t     link_info__get(
+    GHashTable  *a_table,
+    LinkName    *a_name,
+    LinkInfo    **a_out
+);
+int32_t     link_info__get_str(
+    GHashTable  *a_table,
+    const char  *a_name,
+    LinkInfo    **a_out
+);
+
+void        link_info__set(
+    GHashTable  *a_table,
+    LinkName    *a_name,
+    LinkInfo    *a_info
+);
+
+int32_t     link_info__get_create(
+    GHashTable  *a_table,
+    LinkName    *a_name,
+    LinkInfo    **a_out
+);
+
+int32_t link_info__get_create_str(
+    GHashTable  *a_table,
+    const char  *a_name,
+    LinkInfo    **a_out
 );
 
 // ---------------- object ----------------
@@ -232,17 +300,27 @@ void            object_value__serialize_cb(
 Object *    object__constructor_uint32_t(
     const char      *a_type,
     const char      *a_class_name,
-    const uint32_t  a_size,
-    Object          *a_prototype
+    const uint32_t  a_size
 );
 Object *    object__constructor_window();
-Object *    object__constructor(Object *a_prototype);
+void        object__init_window(Object *a_object);
+Object *    object__constructor();
 void        object__destructor_cb(Object *);
-void        object__key_destroy_cb(gpointer a_data);
-void        object__value_destroy_cb(gpointer a_data);
-gboolean    object__key_equal_func(
-    gconstpointer   object_a,
-    gconstpointer   object_b
+
+gboolean    link_name__equal_func(
+    gconstpointer   a_key1,
+    gconstpointer   a_key2
+);
+void        link_name__destroy_cb(gpointer a_data);
+void        link_info__destroy_cb(gpointer a_data);
+gboolean    link_name_equal_func(
+    gconstpointer   a_key1,
+    gconstpointer   a_key2
+);
+
+Object *    object__create(
+    const char  *a_type,
+    const char  *a_class
 );
 
 void        object__lock(Object *a_object);
@@ -259,16 +337,55 @@ void        object__code_define(
         ObjectArray     *a_args
     )
 );
+void        object__parent_link(
+    Object      *a_object,
+    const char  *a_name,
+    LinkFlags   a_flags
+);
+void        object__neigh_link(
+    Object      *a_object,
+    const char  *a_name,
+    LinkFlags   a_flags
+);
+void        object__child_link_info_get(
+    Object      *a_object,
+    const char  *a_name,
+    LinkInfo    **a_out
+);
+int32_t     object__child_link(
+    Object      *a_object,
+    const char  *a_name,
+    const char  *a_object_id,
+    LinkFlags   a_flags
+);
+int32_t     object__get_by_id(
+    const char  *a_id,
+    Object      **a_out
+);
+int32_t     object__prop_mem_add_printf(
+    GHashTable  *a_table,
+    uint8_t     a_create_if_not_exist,
+    const char  *a_name,
+    const char  *a_format,
+    va_list     *a_ap
+);
+int32_t    object__children_mem_add_printf(
+    Object      *a_object,
+    uint8_t     a_create_if_not_exist,
+    const char  *a_name,
+    const char  *a_format,
+    ...
+);
 
 // get
 int32_t     object__prop_ptr_get_obj_obj(
     Object          *a_object,
-    ObjectKey       *a_key,
-    ObjectValue     **a_out
+    LinkName             *a_key,
+    LinkInfo           **a_out
 );
 int32_t     object__prop_get_obj_obj(
     Object          *a_object,
-    ObjectKey       *a_key,
+    LinkName             *a_key,
     Object          **a_out
 );
 int32_t     object__prop_get_str_obj(
@@ -277,9 +394,9 @@ int32_t     object__prop_get_str_obj(
     Object          **a_out
 );
 int32_t     object__prop_ptr_get_str_obj(
-    Object      *a_object,
-    const char  *a_name,
-    ObjectValue **a_out
+    Object          *a_object,
+    const char      *a_name,
+    LinkInfo           **a_out
 );
 int32_t     object__prop_get_double_obj(
     Object          *a_object,
@@ -308,49 +425,97 @@ int32_t     object__prop_get_str_array(
 );
 int32_t     object__prop_get_obj_array(
     Object          *a_object,
-    ObjectKey       *a_name,
+    LinkName             *a_name,
     ObjectArray     **a_out
 );
 
-// set
-void        object__prop_set_obj_obj(
-    Object          *a_object,
-    ObjectKey       *a_name,
-    ObjectValue     *a_val
+// ---------------- neighs left ----------------
+
+void object__neighs__left_prop_set_info(
+    Object      *a_object,
+    LinkName    *a_link_name,
+    LinkInfo    *a_link_info
 );
-void        object__prop_set_str_double(
-    Object          *a_object,
+
+// ---------------- neighs right ----------------
+
+void object__neighs__right_prop_set_info(
+    Object      *a_object,
+    LinkName    *a_link_name,
+    LinkInfo    *a_link_info
+);
+
+// ---------------- prop ----------------
+
+void        object__prop_set(
+    GHashTable      *a_table,
     const char      *a_name,
-    const double    a_val
+    const char      *a_object_id,
+    LinkFlags       a_flags
 );
-void        object__prop_set_obj_str(
-    Object          *a_object,
-    ObjectKey       *a_name,
-    const char      *a_val
+void        object__prop_set_double(
+    GHashTable      *a_table,
+    const char      *a_name,
+    const double    a_val,
+    LinkFlags       a_flags
 );
-void        object__prop_set_str_str(
-    Object          *a_object,
+void        object__prop_set_str(
+    GHashTable      *a_table,
+    const char      *a_name,
+    const char      *a_val,
+    LinkFlags       a_flags
+);
+void        object__prop_set_obj(
+    GHashTable      *a_table,
     const char      *a_name,
-    const char      *a_val
+    Object          *a_val,
+    LinkFlags       a_flags
 );
+
 void        object__prop_set_double_obj(
-    Object          *a_object,
+    GHashTable      *a_table,
     const double    a_name,
-    Object          *a_val
+    Object          *a_val,
+    LinkFlags       a_flags
 );
-void        object__prop_set_str_obj(
+
+// ---------------- children ----------------
+
+void        object__children_prop_set_info(
+    Object      *a_object,
+    LinkName    *a_link_name,
+    LinkInfo    *a_link_info
+);
+void        object__children_prop_set_double(
     Object          *a_object,
     const char      *a_name,
-    Object          *a_val
+    const double    a_val,
+    LinkFlags       a_flags
+);
+void        object__children_prop_set_str(
+    Object          *a_object,
+    const char      *a_name,
+    const char      *a_val,
+    LinkFlags       a_flags
+);
+void        object__children_prop_set_obj(
+    Object          *a_object,
+    const char      *a_name,
+    Object          *a_val,
+    LinkFlags       a_flags
+);
+void        object__children_prop_set_double_obj(
+    Object          *a_object,
+    const double    a_name,
+    Object          *a_val,
+    LinkFlags       a_flags
 );
 
 // mem
 void object__mem_free(
-    Object          *a_window,
     Object          *a_object
 );
 int32_t object__mem_malloc(
-    Object          *a_window,
     Object          *a_object,
     uint64_t        a_size
 );
@@ -380,13 +545,7 @@ void        object__mem_copy_obj(
     Object          *a_object,
     Object          *a_data
 );
-uint32_t    object__prop_mem_add_printf(
-    Object          *a_object,
-    const char      *a_name,
-    const char      *a_format,
-    ...
-);
-uint32_t    object__mem_add_printf(
+int32_t    object__mem_add_printf(
     Object          *a_object,
     const char      *a_format,
     ...
@@ -409,7 +568,7 @@ void object__prop_del_double(
 // exist
 int32_t     object__prop_exist_obj(
     Object          *a_object,
-    Object          *a_name
+    LinkName        *a_key
 );
 int32_t     object__prop_exist_str(
     Object          *a_object,
@@ -499,23 +658,28 @@ Object *    object__api_addEventListener(
     Object          *a_position,    // file position or NULL
     ObjectArray     *a_args
 );
-void        object__dispatchEvent(
+void        object__dispatch_event(
+    GHashTable      *a_table,
+    ObjectAction    *a_action
+);
+void        object__children_dispatch_event(
     Object          *a_object,
     ObjectAction    *a_action
 );
+
 Object *    object__api_dispatchEvent(
     Object          *a_object,
     Object          *a_position,    // file position or NULL
     ObjectArray     *a_args
 );
 Object *    object__get_window_context(
-    Object      *a_context
+    Object          *a_context
 );
 int32_t object__item_resolve(
-    Object      *a_context,
-    Object      *a_position,
-    ListItem    *a_item,
-    Flags       *a_flags
+    Object          *a_context,
+    Object          *a_position,
+    Object          **a_object,
+    Flags           *a_flags
 );
 int32_t object__var_get(
     Object          *a_context,
@@ -591,37 +755,37 @@ Object *    object__statement_assign(
     Flags           *a_flags
 );
 Object *    object__statement_brace(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_statement,
     Flags           *a_flags
 );
 Object *    object__statement_brace_code(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_statement,
     Flags           *a_flags
 );
 Object *    object__statement_brace_array(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_statement,
     Flags           *a_flags
 );
 Object *    object__statement_brace_stack(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_statement,
     Flags           *a_flags
 );
 Object *    object__statement_new(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_statement,
     Flags           *a_flags
 );
 Object *    object__statement_var(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_statement,
     Flags           *a_flags
@@ -629,109 +793,109 @@ Object *    object__statement_var(
 
 // operators
 Object *    object__operator_dot(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_less_than(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_greater_than(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_less_eq_than(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_greater_eq_than(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_colon(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 // logical
 Object *    object__operator__logical(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_logical_and(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_logical_or(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 // compare
 Object *    object__operator_compare_equal(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_compare_not_equal(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 void        object__operator_define(
-    Object    *a_context,
+    Object          *a_context,
     const char      *a_operator,
     Object *        (*a_func)(
-        Object    *a_context,
-        ListItem        *a_code,
-        ListItem        *a_operator,
-        Flags           *a_flags
+        Object      *a_context,
+        ListItem    *a_code,
+        ListItem    *a_operator,
+        Flags       *a_flags
     )
 );
 Object *    object__operator_assign(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_addition_assign(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_subtraction_assign(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator__arithmetic(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
 );
 Object *    object__operator_addition(
-    Object    *a_context,
+    Object          *a_context,
     ListItem        *a_code,
     ListItem        *a_operator,
     Flags           *a_flags
@@ -865,13 +1029,13 @@ Object *    object__process_code(
     Flags           *a_flags
 );
 Object *    object__parse_file(
-    Object          *a_context,
-    ObjectString    *a_path
+    Object          *a_object,
+    const char      *a_path
 );
 Object *    object__parse_buffer(
-    Object          *a_context,
+    Object          *a_object,
     Object          *a_position,
-    ObjectString    *a_buffer
+    const char      *a_buffer
 );
 
 // api
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_action.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_action.c
index f12e2b8..2ddddb0 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_action.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_action.c
@@ -29,8 +29,7 @@ void object_action__destructor_cb(
 }
 
 ObjectAction * object_action__constructor(
-    const char  *a_name,
-    Object      *a_prototype)
+    const char  *a_name)
 {
     ObjectAction    *object = NULL;
     Object          *obj    = NULL;
@@ -45,8 +44,7 @@ ObjectAction * object_action__constructor(
     object = (ObjectAction *)object__constructor_uint32_t(
         "object",   // type
         "Action",   // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_action.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_action.h
index ebb4778..edc2251 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_action.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_action.h
@@ -13,8 +13,7 @@ typedef struct object_action ObjectAction;
 
 void            object_action__destructor_cb(Object *);
 ObjectAction *  object_action__constructor(
-    const char  *,
-    Object      *a_prototype
+    const char  *
 );
 
 void            object_action__serialize_cb(
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_array.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_array.c
index 5a39418..0b6b533 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_array.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_array.c
@@ -24,18 +24,16 @@ void object_array__destructor_cb(
     object__destructor_cb(a_object);
 }
 
-ObjectArray * object_array__constructor(
-    Object *a_prototype)
+ObjectArray * object_array__constructor()
 {
-    ObjectArray    *object = NULL;
+    ObjectArray     *object = NULL;
     Object          *obj    = NULL;
     uint32_t        size    = sizeof(*object);
 
     object = (ObjectArray *)object__constructor_uint32_t(
         "object",
         "Array",
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
@@ -82,10 +80,11 @@ void  object_array__set_by_index(
     object__length_get((Object *)a_object, &length);
 
     // replace value
-    object__prop_set_double_obj(
+    object__children_prop_set_double_obj(
         (Object *)a_object,
         a_index,
-        a_val
+        a_val,
+        LINK_FLAG_TO | LINK_FLAG_FROM
     );
 
     // update length if need
@@ -183,7 +182,12 @@ void object_array__push_obj(
     object__lock(object);
 
     object__length_get(object, &length);
-    object__prop_set_double_obj(object, length, a_val);
+    object__children_prop_set_double_obj(
+        object,
+        length,
+        a_val,
+        LINK_FLAG_FROM | LINK_FLAG_TO
+    );
     object__length_set(object, ++length);
 
     object__unlock(object);
@@ -203,10 +207,7 @@ void object_array__push_str(
         TFATAL("missing argument: 'a_str'\n");
     }
 
-    val = object_string__constructor_str(
-        a_str,
-        (Object *)a_object
-    );
+    val = object_string__constructor_str(a_str);
     if (!val){
         TFATAL("object_string__constructor() failed\n");
     }
@@ -220,10 +221,7 @@ void object_array__push_double(
 {
     ObjectNumber *val = NULL;
 
-    val = object_number__constructor_double(
-        a_val,
-        (Object *)a_object
-    );
+    val = object_number__constructor_double(a_val);
     if (!val){
         TFATAL("object_number__constructor_double() failed\n");
     }
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_array.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_array.h
index 34c5219..10754b8 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_array.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_array.h
@@ -12,9 +12,7 @@ struct object_array
 typedef struct object_array ObjectArray;
 
 void                object_array__destructor_cb(Object *);
-ObjectArray    *    object_array__constructor(
-    Object  *a_prototype
-);
+ObjectArray    *    object_array__constructor();
 
 // set val
 void        object_array__set_by_index(
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_boolean.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_boolean.c
index 1b92f86..8742f62 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_boolean.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_boolean.c
@@ -28,8 +28,7 @@ void object_boolean__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectBoolean * object_boolean__constructor(
-    Object *a_prototype)
+ObjectBoolean * object_boolean__constructor()
 {
     ObjectBoolean   *object = NULL;
     Object          *obj    = NULL;
@@ -38,8 +37,7 @@ ObjectBoolean * object_boolean__constructor(
     object = (ObjectBoolean *)object__constructor_uint32_t(
         "boolean",  // type
         "",         // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
@@ -71,12 +69,11 @@ fail:
 }
 
 ObjectBoolean * object_boolean__constructor_double(
-    const double    a_val,
-    Object          *a_prototype)
+    const double    a_val)
 {
     ObjectBoolean   *ret = NULL;
 
-    ret = object_boolean__constructor(a_prototype);
+    ret = object_boolean__constructor();
     if (!ret){
         TFATAL("object_boolean__constructor() failed\n");
     }
@@ -87,8 +84,7 @@ ObjectBoolean * object_boolean__constructor_double(
 }
 
 ObjectBoolean * object_boolean__constructor_str(
-    const char  *a_val,
-    Object      *a_prototype)
+    const char  *a_val)
 {
     ObjectBoolean *ret = NULL;
     double       val  = 0.0f;
@@ -98,10 +94,7 @@ ObjectBoolean * object_boolean__constructor_str(
     }
 
     val = atof(a_val);
-    ret = object_boolean__constructor_double(
-        val,
-        a_prototype
-    );
+    ret = object_boolean__constructor_double(val);
 
     return ret;
 }
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_boolean.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_boolean.h
index d6a0943..9be9907 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_boolean.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_boolean.h
@@ -13,16 +13,12 @@ struct object_boolean
 typedef struct object_boolean ObjectBoolean;
 
 void            object_boolean__destructor_cb(Object *);
-ObjectBoolean * object_boolean__constructor(
-    Object      *a_prototype
-);
+ObjectBoolean * object_boolean__constructor();
 ObjectBoolean * object_boolean__constructor_double(
-    const double,
-    Object      *a_prototype
+    const double
 );
 ObjectBoolean * object_boolean__constructor_str(
-    const char  *,
-    Object      *a_prototype
+    const char  *
 );
 
 void    object_boolean__serialize_cb(
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_call.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_call.c
index 3b6af98..29b7e96 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_call.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_call.c
@@ -37,8 +37,7 @@ void object_code_call__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectCodeCall * object_code_call__constructor(
-    Object *a_prototype)
+ObjectCodeCall * object_code_call__constructor()
 {
     ObjectCodeCall  *object = NULL;
     uint32_t        size    = sizeof(*object);
@@ -46,8 +45,7 @@ ObjectCodeCall * object_code_call__constructor(
     object = (ObjectCodeCall *)object__constructor_uint32_t(
         "code_call",    // type
         "",             // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
@@ -127,7 +125,7 @@ Object * object_code_call__call_with_args(
     OBJECT_CHECK(a_args);
 
     code_item   = list_item_alloc();
-    code_call   = object_code_call__constructor(a_context);
+    code_call   = object_code_call__constructor();
 
     object__ref_inc((Object *)a_args);
     code_call->args = a_args;
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_call.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_call.h
index 6ac3100..c420bb8 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_call.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_call.h
@@ -20,9 +20,7 @@ typedef struct object_code_call ObjectCodeCall;
 void                object_code_call__destructor_cb(
     Object *
 );
-ObjectCodeCall *    object_code_call__constructor(
-    Object  *a_prototype
-);
+ObjectCodeCall *    object_code_call__constructor();
 
 void    object_code_call__serialize_cb(
     Object      *a_object,
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_define.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_define.c
index 4c5b735..d1bfb22 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_define.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_define.c
@@ -33,8 +33,7 @@ void object_code_define__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectCodeDefine * object_code_define__constructor(
-    Object  *a_prototype)
+ObjectCodeDefine * object_code_define__constructor()
 {
     ObjectCodeDefine    *object = NULL;
     uint32_t            size    = sizeof(*object);
@@ -42,8 +41,7 @@ ObjectCodeDefine * object_code_define__constructor(
     object = (ObjectCodeDefine *)object__constructor_uint32_t(
         "code_define",  // type
         "",             // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
@@ -78,8 +76,8 @@ void object_code_define__serialize(
     const char  *a_delimeter,
     ObjectArray *a_args)        // function call args or NULL
 {
-    ObjectCodeDefine  *code_define = NULL;
-    int32_t     res;
+    ObjectCodeDefine    *code_define = NULL;
+    int32_t             res;
 
     code_define = dynamic_pointer_cast(
         ObjectCodeDefine,
@@ -163,8 +161,9 @@ void object_code_define__serialize(
                     );
 
                     if (val){
-                        serialized = object__constructor(
-                            a_object
+                        serialized = object__create(
+                            "object",
+                            ""
                         );
                         if (!serialized){
                             object__unlock(a_object);
@@ -228,8 +227,9 @@ void object_code_define__serialize(
 
                     OBJECT_CHECK(cur_object);
 
-                    serialized = object__constructor(
-                        a_object
+                    serialized = object__create(
+                        "object",
+                        ""
                     );
                     if (!serialized){
                         object__ref_dec(cur_object);
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_define.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_define.h
index 7191a38..20df4d1 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_define.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_code_define.h
@@ -23,9 +23,7 @@ typedef struct object_code_define ObjectCodeDefine;
 void               object_code_define__destructor_cb(
     Object  *
 );
-ObjectCodeDefine * object_code_define__constructor(
-    Object  *a_prototype
-);
+ObjectCodeDefine * object_code_define__constructor();
 
 void        object_code_define__serialize(
     Object      *a_object,
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_connection.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_connection.c
index 564be27..a58399f 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_connection.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_connection.c
@@ -29,8 +29,7 @@ void object_connection__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectConnection * object_connection__constructor(
-    Object *a_prototype)
+ObjectConnection * object_connection__constructor()
 {
     ObjectConnection    *object = NULL;
     uint32_t            size    = sizeof(*object);
@@ -38,8 +37,7 @@ ObjectConnection * object_connection__constructor(
     object = (ObjectConnection *)object__constructor_uint32_t(
         "object",       // type
         "Connection",   // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_connection.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_connection.h
index db6b358..1cce930 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_connection.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_connection.h
@@ -18,9 +18,7 @@ struct object_connection
 typedef struct object_connection ObjectConnection;
 
 void                object_connection__destructor_cb(Object *);
-ObjectConnection *  object_connection__constructor(
-    Object *a_prototype
-);
+ObjectConnection *  object_connection__constructor();
 
 // api
 Object *    object_connection__api_close(
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_file.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_file.c
index 39ae118..68a588f 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_file.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_file.c
@@ -30,8 +30,7 @@ void object_file__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectFile * object_file__constructor(
-    Object *a_prototype)
+ObjectFile * object_file__constructor()
 {
     ObjectFile  *object = NULL;
     Object      *obj    = NULL;
@@ -40,8 +39,7 @@ ObjectFile * object_file__constructor(
     object = (ObjectFile *)object__constructor_uint32_t(
         "object", // type
         "File",   // class_name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_file.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_file.h
index 9ee8c66..d3ef18b 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_file.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_file.h
@@ -12,9 +12,7 @@ struct object_file
 typedef struct object_file ObjectFile;
 
 void          object_file__destructor_cb(Object *);
-ObjectFile *  object_file__constructor(
-    Object *a_prototype
-);
+ObjectFile *  object_file__constructor();
 
 #endif
 
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_number.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_number.c
index 8732621..a15e9b6 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_number.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_number.c
@@ -28,8 +28,7 @@ void object_number__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectNumber * object_number__constructor(
-    Object  *a_prototype)
+ObjectNumber * object_number__constructor()
 {
     ObjectNumber    *object = NULL;
     Object          *obj    = NULL;
@@ -38,8 +37,7 @@ ObjectNumber * object_number__constructor(
     object = (ObjectNumber *)object__constructor_uint32_t(
         "number",   // type
         "",         // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
@@ -71,40 +69,22 @@ fail:
 }
 
 ObjectNumber * object_number__constructor_double(
-    const double    a_val,
-    Object          *a_prototype)
+    const double    a_val)
 {
     ObjectNumber    *ret = NULL;
-    double          val  = a_val;
 
-    ret = object_number__constructor(a_prototype);
+    ret = object_number__constructor();
     if (!ret){
         TFATAL("object_number__constructor() failed\n");
     }
 
-    ret->super.mem_size = sizeof(val);
-    ret->super.mem      = malloc(ret->super.mem_size);
-    if (!ret->super.mem){
-#ifdef __x86_64__
-        TFATAL("cannot allocate memory,"
-            " was needed: '%lu' byte(s)\n",
-            ret->super.mem_size
-        );
-#else
-        TFATAL("cannot allocate memory,"
-            " was needed: '%u' byte(s)\n",
-            ret->super.mem_size
-        );
-#endif
-    }
-    memcpy(ret->super.mem, &val, ret->super.mem_size);
+    object_number__mem_set(ret, a_val);
 
     return ret;
 }
 
 ObjectNumber * object_number__constructor_str(
-    const char  *a_val,
-    Object      *a_prototype)
+    const char  *a_val)
 {
     ObjectNumber *ret = NULL;
     double       val  = 0.0f;
@@ -114,7 +94,7 @@ ObjectNumber * object_number__constructor_str(
     }
 
     val = atof(a_val);
-    ret = object_number__constructor_double(val, a_prototype);
+    ret = object_number__constructor_double(val);
 
     return ret;
 }
@@ -261,3 +241,36 @@ int32_t object_number__to_int32_t(
     return ret;
 }
 
+void object_number__mem_set(
+    ObjectNumber    *a_object,
+    const double    a_val)
+{
+    OBJECT_CHECK(a_object);
+
+    if (a_object->super.mem){
+        free(a_object->super.mem);
+        a_object->super.mem = NULL;
+    }
+
+    a_object->super.mem_size = sizeof(a_val);
+    a_object->super.mem      = malloc(a_object->super.mem_size);
+    if (!a_object->super.mem){
+#ifdef __x86_64__
+        TFATAL("cannot allocate memory,"
+            " was needed: '%lu' byte(s)\n",
+            a_object->super.mem_size
+        );
+#else
+        TFATAL("cannot allocate memory,"
+            " was needed: '%u' byte(s)\n",
+            a_object->super.mem_size
+        );
+#endif
+    }
+    memcpy(
+        a_object->super.mem,
+        &a_val,
+        a_object->super.mem_size
+    );
+}
+
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_number.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_number.h
index 4ce9060..4decd17 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_number.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_number.h
@@ -13,16 +13,12 @@ struct object_number
 typedef struct object_number ObjectNumber;
 
 void            object_number__destructor_cb(Object *);
-ObjectNumber *  object_number__constructor(
-    Object      *a_prototype
-);
+ObjectNumber *  object_number__constructor();
 ObjectNumber *  object_number__constructor_double(
-    const double,
-    Object      *a_prototype
+    const double
 );
 ObjectNumber *  object_number__constructor_str(
-    const char  *,
-    Object      *a_prototype
+    const char  *
 );
 
 void            object_number__serialize_cb(
@@ -52,5 +48,10 @@ int32_t         object_number__to_int32_t(
     ObjectNumber    *a_object
 );
 
+void            object_number__mem_set(
+    ObjectNumber    *a_object,
+    const double    a_val
+);
+
 #endif
 
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_operator.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_operator.c
index 2e5e848..7d2120c 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_operator.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_operator.c
@@ -26,8 +26,7 @@ void object_operator__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectOperator * object_operator__constructor(
-    Object *a_prototype)
+ObjectOperator * object_operator__constructor()
 {
     ObjectOperator  *object = NULL;
     Object          *obj    = NULL;
@@ -36,8 +35,7 @@ ObjectOperator * object_operator__constructor(
     object = (ObjectOperator *)object__constructor_uint32_t(
         "operator", // type
         "",         // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_operator.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_operator.h
index a861ac8..89f470a 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_operator.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_operator.h
@@ -19,9 +19,7 @@ struct object_operator
 typedef struct object_operator ObjectOperator;
 
 void                object_operator__destructor_cb(Object *);
-ObjectOperator *    object_operator__constructor(
-    Object  *a_prototype
-);
+ObjectOperator *    object_operator__constructor();
 
 void    object_operator__serialize_cb(
     Object          *a_object,
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_statement.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_statement.c
index 1d2b4a6..1769545 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_statement.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_statement.c
@@ -26,8 +26,7 @@ void object_statement__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectStatement * object_statement__constructor(
-    Object *a_prototype)
+ObjectStatement * object_statement__constructor()
 {
     ObjectStatement *object = NULL;
     Object          *obj    = NULL;
@@ -36,8 +35,7 @@ ObjectStatement * object_statement__constructor(
     object = (ObjectStatement *)object__constructor_uint32_t(
         "statement",  // type
         "",         // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_statement.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_statement.h
index 0c4044a..5084270 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_statement.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_statement.h
@@ -18,9 +18,7 @@ struct object_statement
 typedef struct object_statement ObjectStatement;
 
 void                object_statement__destructor_cb(Object *);
-ObjectStatement *   object_statement__constructor(
-    Object *a_prototype
-);
+ObjectStatement *   object_statement__constructor();
 
 void    object_statement__serialize_cb(
     Object          *a_object,
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_string.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_string.c
index c1ee4db..abfcba6 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_string.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_string.c
@@ -33,8 +33,7 @@ void object_string__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectString * object_string__constructor(
-    Object *a_prototype)
+ObjectString * object_string__constructor()
 {
     ObjectString    *object = NULL;
     Object          *obj    = NULL;
@@ -43,8 +42,7 @@ ObjectString * object_string__constructor(
     object = (ObjectString *)object__constructor_uint32_t(
         "string",   // type
         "",         // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
@@ -85,32 +83,27 @@ fail:
 }
 
 ObjectString * object_string__constructor_str(
-    const char  *a_val,
-    Object      *a_prototype)
+    const char  *a_val)
 {
     ObjectString    *ret = NULL;
-    double          len  = 0;
 
     if (!a_val){
         TFATAL("missing argument: 'a_val'\n");
     }
 
-    ret = object_string__constructor(a_prototype);
+    ret = object_string__constructor();
     if (!ret){
         TFATAL("object_string__constructor()\n");
     }
 
-    object__mem_set_copy_str((Object *)ret, a_val);
-
-    object__length_set((Object *)ret, len);
+    object_string__mem_set(ret, a_val);
 
     return ret;
 }
 
 ObjectString * object_string__constructor_raw(
     const char  *a_data,
-    uint64_t    a_data_size,
-    Object      *a_prototype)
+    uint64_t    a_data_size)
 {
     ObjectString    *ret = NULL;
 
@@ -118,7 +111,7 @@ ObjectString * object_string__constructor_raw(
         TFATAL("missing argument: 'a_data'\n");
     }
 
-    ret = object_string__constructor(a_prototype);
+    ret = object_string__constructor();
     if (!ret){
         TFATAL("object_string__constructor()\n");
     }
@@ -327,7 +320,7 @@ ObjectString * object_string__char_at_str(
     }
 
     // prepare ret
-    ret = object_string__constructor((Object *)a_object);
+    ret = object_string__constructor();
     if (!ret){
         TFATAL("object_string__constructor() failed\n");
     }
@@ -473,7 +466,7 @@ void object_string__api_charAt(
 
 int32_t object_string__load_from_file(
     ObjectString    *a_object,
-    ObjectString    *a_path)
+    const char      *a_path)
 {
     int32_t         err         = -1;
     int32_t         res, fd     = -1;
@@ -490,10 +483,10 @@ int32_t object_string__load_from_file(
     }
 
     // open file
-    fd = open(object_string__mem_c_str(a_path), O_RDONLY);
+    fd = open(a_path, O_RDONLY);
     if (0 > fd){
         TFATAL("cannot open: '%s' for read\n",
-            object_string__mem_c_str(a_path)
+            a_path
         );
     }
 
@@ -502,7 +495,7 @@ int32_t object_string__load_from_file(
     if (res){
         TFATAL("stat for fd: '%d', file: '%s' failed\n",
             fd,
-            object_string__mem_c_str(a_path)
+            a_path
         );
     }
 
@@ -542,7 +535,7 @@ int32_t object_string__load_from_file(
             TFATAL("cannot read file: '%s',"
                 " fd: '%d',"
                 " res: '%ld'\n",
-                object_string__mem_c_str(a_path),
+                a_path,
                 fd,
                 res2
             );
@@ -550,7 +543,7 @@ int32_t object_string__load_from_file(
             TFATAL("cannot read file: '%s',"
                 " fd: '%d',"
                 " res: '%d'\n",
-                object_string__mem_c_str(a_path),
+                a_path,
                 fd,
                 res2
             );
@@ -564,7 +557,7 @@ int32_t object_string__load_from_file(
             TFATAL("partial read, from file: '%s',"
                 " fd: '%d',"
                 " was_read: '%lu' != st.st_size: '%lu'\n",
-                object_string__mem_c_str(a_path),
+                a_path,
                 fd,
                 was_read,
                 st.st_size
@@ -573,7 +566,7 @@ int32_t object_string__load_from_file(
             TFATAL("partial read, from file: '%s',"
                 " fd: '%d',"
                 " was_read: '%u' != st.st_size: '%u'\n",
-                object_string__mem_c_str(a_path),
+                a_path,
                 fd,
                 was_read,
                 st.st_size
@@ -637,3 +630,24 @@ const char * object_string__mem_c_str(
     return ret;
 }
 
+void object_string__mem_set(
+    ObjectString    *a_object,
+    const char      *a_val)
+{
+    int32_t len = 0;
+
+    OBJECT_CHECK(a_object);
+    if (!a_val){
+        TFATAL("missing argument: 'a_val'\n");
+    }
+
+    len = strlen(a_val);
+
+    object__lock((Object *)a_object);
+
+    object__mem_set_copy_str((Object *)a_object,    a_val);
+    object__length_set((Object *)a_object,          len);
+
+    object__unlock((Object *)a_object);
+}
+
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_string.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_string.h
index f65e59d..8455578 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_string.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_string.h
@@ -14,20 +14,15 @@ typedef struct object_string ObjectString;
 #include "object_array.h"
 
 void            object_string__destructor_cb(Object *);
-ObjectString *  object_string__constructor(
-    Object      *a_prototype
-);
+ObjectString *  object_string__constructor();
 ObjectString *  object_string__constructor_str(
-    const char  *,
-    Object      *a_prototype
+    const char  *
 );
 ObjectString *  object_string__constructor_raw(
     const char  *a_data,
-    uint64_t    a_data_size,
-    Object      *a_prototype
+    uint64_t    a_data_size
 );
 
-
 void        object_string__realloc_and_concat(
     char        **a_out,
     const char  *a_format,
@@ -72,7 +67,7 @@ ObjectString *  object_string__charAt_str(
 );
 int32_t         object_string__load_from_file(
     ObjectString    *a_object,
-    ObjectString    *a_path
+    const char      *a_path
 );
 void            object_string__remove_last_char(
     ObjectString    *a_string
@@ -84,5 +79,10 @@ Object *        object_string__api_charAt(
     ObjectArray     *a_args
 );
 
+void            object_string__mem_set(
+    ObjectString    *a_object,
+    const char      *a_val
+);
+
 #endif
 
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_timer.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_timer.c
index 0d861b3..a5dcb65 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_timer.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_timer.c
@@ -41,17 +41,15 @@ void object_timer__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectTimer * object_timer__constructor(
-    Object *a_prototype)
+ObjectTimer * object_timer__constructor()
 {
     ObjectTimer  *object = NULL;
-    uint32_t        size    = sizeof(*object);
+    uint32_t     size    = sizeof(*object);
 
     object = (ObjectTimer *)object__constructor_uint32_t(
         "timer",    // type
         "",         // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_timer.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_timer.h
index b6a45b4..082dcf8 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_timer.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/object_timer.h
@@ -20,9 +20,7 @@ struct object_timer
 typedef struct object_timer ObjectTimer;
 
 void            object_timer__destructor_cb(Object *);
-ObjectTimer *   object_timer__constructor(
-    Object *a_prototype
-);
+ObjectTimer *   object_timer__constructor();
 
 void    object_timer__serialize_cb(
     Object      *a_object,
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/test.js b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/test.js
index 1d0ecb8..eaa428f 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/test.js
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/test.js
@@ -262,6 +262,10 @@ function morik(){
     alert("morik was here\n");
 };
 
-morik();
+//morik();
+
+alert(self);
+alert(this);
+
 exit();
 
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/tmp/object_ipnoise.c b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/tmp/object_ipnoise.c
index 37efc50..c62279d 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/tmp/object_ipnoise.c
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/tmp/object_ipnoise.c
@@ -33,8 +33,7 @@ void object_ipnoise__destructor_cb(
     object__destructor_cb((Object *)object);
 }
 
-ObjectIPNoise * object_ipnoise__constructor(
-    Object *a_prototype)
+ObjectIPNoise * object_ipnoise__constructor()
 {
     ObjectIPNoise   *object = NULL;
     Object          *obj    = NULL;
@@ -43,8 +42,7 @@ ObjectIPNoise * object_ipnoise__constructor(
     object = (ObjectIPNoise *)object__constructor_uint32_t(
         "object",   // type
         "IPNoise",  // class name
-        size,
-        a_prototype
+        size
     );
     if (!object){
         PERROR("cannot allocate memory,"
@@ -93,7 +91,7 @@ Object * object_ipnoise__api_getMemInfo(
     OBJECT_CHECK(a_object);
     OBJECT_CHECK(a_args);
 
-    ret = object__constructor(a_object);
+    ret = object__constructor();
     if (!ret){
         TFATAL("object__constructor() failed\n");
     }
diff --git a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/tmp/object_ipnoise.h b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/tmp/object_ipnoise.h
index 9382d73..ae08d65 100644
--- a/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/tmp/object_ipnoise.h
+++ b/IPNoise/packages/ipnoise-neuron/neuron-rc/doc/tests/engine/tmp/object_ipnoise.h
@@ -14,9 +14,7 @@ typedef struct object_ipnoise ObjectIPNoise;
 #include "object_array.h"
 
 void            object_ipnoise__destructor_cb(Object *);
-ObjectIPNoise * object_ipnoise__constructor(
-    Object *a_prototype
-);
+ObjectIPNoise * object_ipnoise__constructor();
 
 // api
 Object *    object_ipnoise__api_getMemInfo(
